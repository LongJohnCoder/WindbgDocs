<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML DIR="LTR" xmlns:MSHelp="http://msdn.microsoft.com/MSHelp">
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<TITLE>Using Input and Output</TITLE>
<META NAME="ms.locale" content="en-us">
<META NAME="DESCRIPTION" CONTENT="Debugger, Debugger, Design Guide, Using Input and Output"><xml><MSHelp:Keyword Index="A" Term="Engine_DG_ce5dd9cd-7068-4ca7-95d9-f4985a9812c2.xml"/>
<META NAME="MS-HKWD" CONTENT="Debugger Engine API, input and output"></xml><LINK REL="stylesheet" type="text/css" href="backsdk4.css"><SCRIPT src="langref.js"></SCRIPT><style>dd {margin-bottom:0em; margin-left:1.9em; }</style>
<style>.divclass {behavior:url(#default#savehistory);}</style>
<META NAME="save" CONTENT="history">
</HEAD>
<Body topmargin="0">
<DIV STYLE="display:none;"></DIV>
<DIV STYLE="display:none;"></DIV>
<TABLE CLASS="buttonbarshade" CELLSPACING="0" border="0"><TR><TD NOWRAP="true"> </TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING="0">
<TR ID="hdr">
<TD NOWRAP="true" CLASS="runninghead">Debugging Tools for Windows</TD>
</TR>
</TABLE>
<H1><A NAME="Engine_DG_ce5dd9cd-7068-4ca7-95d9-f4985a9812c2.xml"></A>Using Input and Output</H1>
<P>For an overview of the input and output streams in the debugger engine, see <a href="engine_overview_21beeb6d-d7a0-454d-9f9d-ebbab52e3664.xml.htm">Input and Output</a>.</P>
<H4>Input</H4>
<P>The engine will ask for input from all its <a href="dbg_glossary_b06af58a-5ee8-44e1-855d-951cac7e4969.xml.htm#ebdc9536-c283-4bb5-b572-c30c8c8acd51">clients</a> if the <a href="idebugcontrol_10615761-d032-439f-955b-220def3835a9.xml.htm"><b>Input</b></a> method is called on a client.  The input is returned to the caller of <b>Input</b>.</P>
<H4>Input Callbacks</H4>
<P>When the engine asks for input from a client, it uses the <a href="comcallbacks_9dd6d3d2-e92d-41bc-8276-fa8b7818a372.xml.htm"><b>IDebugInputCallbacks</b></a> object registered with that client.  An <b>IDebugInputCallbacks</b> object may be registered with a client using <a href="idebugclient_fea0d021-69b2-462f-965f-455305fd5971.xml.htm"><b>SetInputCallbacks</b></a>.  Each client can have at most one <b>IDebugInputCallbacks</b> object registered with it.</P>
<P>The request for input begins with the engine calling the <a href="comcallbacks_155d62a2-08b2-4caf-80d6-80fab139e77b.xml.htm"><b>IDebugInputCallbacks::StartInput</b></a> method.  This informs the <b>IDebugInputCallbacks</b> object that the engine is now waiting for input.</P>
<P>If the <b>IDebugInputCallbacks</b> object has some input for the engine, it can call the <a href="idebugcontrol_e060c1a6-43cd-46a1-ba4c-e9aa69bcf205.xml.htm"><b>ReturnInput</b></a> method of <i>any</i> client.  Once the <b>ReturnInput</b> method has been called, the engine will not take any more input.  Subsequent callers of this method will be informed that the input was not received.</P>
<P>The engine will then call <a href="comcallbacks_3e06dd1c-483b-4934-83d5-b00241d9d88b.xml.htm"><b>IDebugInputCallbacks::EndInput</b></a> to indicate that it has stopped waiting for input.</P>
<P>Finally, the engine will echo this input to the registered <b>IDebugOutputCallbacks</b> object of every client (except the one used to provide the input) by using <a href="comcallbacks_9b5e22d8-aa8d-498e-b3b5-ad6d73462db4.xml.htm"><b>IDebugOutputCallbacks::Output</b></a> with the bit-mask set to DEBUG_OUTPUT_PROMPT.</P>
<H4>Output</H4>
<P>Output may be sent to the engine using several client methods &#8212; for example <a href="idebugcontrol_4b29317b-e521-4deb-84dc-fc4bb7d6ca90.xml.htm"><b>Output</b></a> and <a href="idebugcontrol_4c0f8057-9e61-4a89-a2e8-be15bd49e5fc.xml.htm"><b>OutputVaList</b></a>.  Upon receiving output, the engine sends it to some clients.</P>
<P>Clients use an <i>output mask</i> to indicate which types of output they are interested in.  Whenever output is produced by the engine, it is accompanied by a mask specifying its output type.  If the type of output matches the output mask of the client, the client will receive the output.  The output mask may be set by calling <a href="idebugclient_85242101-702d-4c9a-b71a-5eddd76a4fa6.xml.htm"><b>SetOutputMask</b></a> and queried using <a href="idebugclient_ff2626fe-2299-4008-b655-0b7dbd46ef8b.xml.htm"><b>GetOutputMask</b></a>.  See <a href="structures_d97f5c07-2709-4dcb-8756-da1bc4b31099.xml.htm">DEBUG_OUTPUT_<i>XXX</i></a> for details of the output mask values.</P>
<P>The list of clients that the engine will send output to is controlled by the <i>output control</i>.  Typically, the output control is set to send output to all clients; however, it can be temporarily changed using <a href="idebugcontrol_b35fb81f-3425-4a39-8c80-b6e8a161ba71.xml.htm"><b>ControlledOutput</b></a> and <a href="idebugcontrol_2ea55393-9577-4639-ac83-5cefb584ff3b.xml.htm"><b>ControlledOutputVaList</b></a>.  See <a href="structures_498e4f9e-99c5-4fec-8aaf-0d84d2d097d0.xml.htm">DEBUG_OUTCTL_<i>XXX</i></a> for details about output control values.</P>
<P>Output may be buffered by the engine.  If multiple pieces of output are passed to the engine, it may collect them and send them to the clients in one large piece.  To flush this buffer, use <a href="idebugclient_e808ca3a-5762-419b-96de-4c49984c1ccd.xml.htm"><b>FlushCallbacks</b></a>.  </P>
<P>Each client object has an <i>output width</i>, which is the width of the output display for the client object.  While this width is only used as a hint, some commands and extension functions format their output based on this width.  The width is returned by the <a href="idebugclient_fedb1d8c-3de3-449d-b8b6-4184f2b35734.xml.htm"><b>GetOutputWidth</b></a> method and can be set using the <a href="idebugclient_6dcbe9a7-ef01-4ad0-a41c-35ee1676f993.xml.htm"><b>SetOutputWidth</b></a> method.</P>
<H4>Output Callbacks</H4>
<P>When the engine sends output to a client, it uses the <a href="comcallbacks_ed6ca0bd-5599-426d-b089-18a12311eba0.xml.htm"><b>IDebugOutputCallbacks</b></a> object registered with the client.  An <b>IDebugOutputCallbacks</b> object may be registered with a client using <a href="idebugclient_b1da4bc1-b368-475e-bd13-021358f9d234.xml.htm"><b>SetOutputCallbacks</b></a>.  Each client can have at most one <b>IDebugInputCallbacks</b> object registered with it.</P>
<P>To send the output, the engine calls the <a href="comcallbacks_9b5e22d8-aa8d-498e-b3b5-ad6d73462db4.xml.htm"><b>IDebugOutputCallbacks::Output</b></a> method.</P>
<H4>Output Line Prefix</H4>
<P>Each client object has an <i>output line prefix</i> which is prepended to every line of output sent to the output callback associated with the client object.  This can be used for indentation or to place identifying marks on each line of output.</P>
<P>The output line prefix is returned by <a href="idebugclient_c1057426-8bf5-4dd3-a491-c5a848a86fcc.xml.htm"><b>GetOutputLinePrefix</b></a> and can be set using <a href="idebugclient_acbeb9dd-252f-4f35-8480-2f090f87d871.xml.htm"><b>SetOutputLinePrefix</b></a>.  To temporarily change the output line prefix and later change it back again, use <a href="idebugclient_2a3ce4c0-f799-4a70-9711-a454ce267ce5.xml.htm"><b>PushOutputLinePrefix</b></a> and <a href="idebugclient_6f75bf46-cfb8-4844-a817-74e58d376dc7.xml.htm"><b>PopOutputLinePrefix</b></a>.</P>
<H4>Log Files</H4>
<P>The debugger engine supports opening a log file to record a debugging session.  At most, one log file can be open at a time.  Output sent to the output callbacks is also sent to this log file (unless it is flagged to not be logged).</P>
<P>To open a log file, use <a href="idebugcontrol_93e0a810-9b23-43c2-b714-99a39c398f1e.xml.htm"><b>OpenLogFile2</b></a> (or <a href="idebugcontrol_984f684e-c1c0-4819-b8ac-02718581c6ad.xml.htm"><b>OpenLogFile</b></a>).  The method <a href="idebugcontrol_9822bd84-b8ee-4d36-a66f-e38567d23646.xml.htm"><b>GetLogFile2</b></a> (or <a href="idebugcontrol_cad2fa56-b2ca-4a26-822e-193acf602913.xml.htm"><b>GetLogFile</b></a>) returns the currently open log file.  To close the log file, use <a href="idebugcontrol_988fe3ac-a51d-4757-995d-40fe9d66aa02.xml.htm"><b>CloseLogFile</b></a>.</P>
<P>The method <a href="idebugcontrol_b1c44a2b-d2fd-407b-8994-00f5e53af10d.xml.htm"><b>SetLogMask</b></a> can be used to filter the output sent to the log file, and <a href="idebugcontrol_a3ef306a-5134-49c7-b589-65a4afaa90ac.xml.htm"><b>GetLogMask</b></a> will return the current log file filter.</P>
<H4>Prompt</H4>
<P>In an interactive debugging session, a prompt can be used to indicate to the user that the debugger is waiting for user input.  The prompt is sent to the output callbacks using the <a href="idebugcontrol_bb972181-80f5-4c7a-8705-919273529eee.xml.htm"><b>OutputPrompt</b></a> and <a href="idebugcontrol_fc743964-a97c-45d2-8167-0e7401c7a546.xml.htm"><b>OutputPromptVaList</b></a> methods.  The contents of the standard prompt are returned by  <a href="idebugcontrol_1f566e74-8920-43ce-8e5f-3c467ddb8d8a.xml.htm"><b>GetPromptText</b></a>.</P>
<DIV style="display:yes"></DIV>
<DIV CLASS="footer"><br><A href="dbglegal.htm">© 2009 Microsoft Corporation</A><br><A href="mailto:windbgfb@microsoft.com?subject=documentation feedback [Debugger]: Using Input and Output RELEASE: (December 09, 2009)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AThe WDK team uses the feedback submitted to improve the WDK documentation. We do not use your e-mail address for any other purpose. We will remove your e-mail address from our system after the issue you are reporting has been resolved. While we are working to resolve this issue, we may send you an e-mail message to request more information about your feedback. After the issues have been addressed, we may send you an e-mail message to let you know that your feedback has been addressed.%0A%0AFor more information about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx.
              ">Send feedback on this topic</A><br>Debugging Tools for Windows<br>December 09, 2009<br></DIV>
</Body>
</HTML>
