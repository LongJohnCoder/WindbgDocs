<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML DIR="LTR" xmlns:MSHelp="http://msdn.microsoft.com/MSHelp">
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<TITLE>Example 12: Using Page Heap Verification to Find a Bug</TITLE>
<META NAME="ms.locale" content="en-us">
<META NAME="DESCRIPTION" CONTENT="Debugger, Debugger, Design Guide, Example 12:  Using Page Heap Verification to Find a Bug"><xml><MSHelp:Keyword Index="A" Term="GFlags_3c716d5f-7582-48e7-b2f2-6c7c8957ddb6.xml"/></xml><LINK REL="stylesheet" type="text/css" href="backsdk4.css"><SCRIPT src="langref.js"></SCRIPT><style>dd {margin-bottom:0em; margin-left:1.9em; }</style>
<style>.divclass {behavior:url(#default#savehistory);}</style>
<META NAME="save" CONTENT="history">
</HEAD>
<Body topmargin="0">
<DIV STYLE="display:none;"></DIV>
<DIV STYLE="display:none;"></DIV>
<TABLE CLASS="buttonbarshade" CELLSPACING="0" border="0"><TR><TD NOWRAP="true"> </TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING="0">
<TR ID="hdr">
<TD NOWRAP="true" CLASS="runninghead">Debugging Tools for Windows</TD>
</TR>
</TABLE>
<H1><A NAME="GFlags_3c716d5f-7582-48e7-b2f2-6c7c8957ddb6.xml"></A>Example 12:  Using Page Heap Verification to Find a Bug</H1>
<P>The following series of commands demonstrates how to use the page heap verification features of GFlags and the NTSD debugger to detect an error in heap memory use. In this example, the programmer suspects that a fictitious application, <nobr><i>pheap-buggy.exe</i></nobr>, has a heap error, and proceeds through a series of tests to identify the error.</P>
<P>For details on NTSD, see <a href="r01_intro_d33cdade-c8d0-4a93-a626-d19ffa1df8b2.xml.htm">CDB and NTSD</a>.</P>
<P></P>
<P></P>
<P></P>
<P></P>
<P></P>
<P></P>
<P></P>
<P></P>
<H3><A NAME="9e751ef5-604c-4f3f-8c80-51648f6b42eb"></A>Step 1: Enable standard page heap verification</H3>
<P>The following command enables standard page heap verification for <nobr><i>pheap-buggy.exe</i></nobr>:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr><b>gflags /p /enable pheap-buggy.exe</b><BR><BR></nobr></P>
<H3><A NAME="953403ba-b17b-4a68-bc44-02be91bcc6f4"></A>Step 2: Verify that page heap is enabled</H3>
<P>The following command lists the image files for which page heap verification is enabled:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr><b>gflags /p</b><BR><BR></nobr></P>
<P>In response, GFlags displays the following list of programs. In this display, <b>traces</b> indicates standard page heap verification, and <b>full traces</b> indicates full page heap verification. In this case, <nobr><i>pheap-buggy.exe</i></nobr> is listed with <b>traces</b>, indicating that standard page heap verification is enabled, as intended.</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>pheap-buggy.exe: page heap enabled with flags (traces )<BR><BR></nobr></P>
<H3><A NAME="23324a7b-966c-4d78-9344-b0a6aa4d85b5"></A>Step 3: Run the debugger</H3>
<P>The following command runs the <b>CorruptAfterEnd</b> function of <nobr><i>pheap-buggy.exe</i></nobr> in NTSD with the <b>-g</b> (ignore initial breakpoint) and <b>-x</b> (set second-chance break on access violation exceptions) parameters:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr><b>ntsd -g -x pheap-buggy /CorruptAfterEnd</b><BR><BR></nobr></P>
<P>When the application fails, NTSD generates the following display, which indicates that it detected an error in <nobr><i>pheap-buggy.exe</i></nobr>:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr><BR>===========================================================<BR>VERIFIER STOP 00000008: pid 0xAA0: corrupted suffix pattern<BR><BR>        00C81000 : Heap handle <BR>        00D81EB0 : Heap block <BR>        00000100 : Block size <BR>        00000000 :<BR>===========================================================<BR><BR>Break instruction exception - code 80000003 (first chance)<BR>eax=00000000 ebx=00d81eb0 ecx=77f7e257 edx=0006fa18 esi=00000008 edi=00c81000<BR>eip=77f7e098 esp=0006fc48 ebp=0006fc5c iopl=0         nv up ei pl zr na po nc<BR>cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246<BR>ntdll!DbgBreakPoint:<BR>77f7e098 cc               int     3<BR><BR></nobr></P>
<P>The header information includes the address of the heap with the corrupted block (00C81000 : Heap handle), the address of the corrupted block (00D81EB0 : Heap block), and the size of the allocation (00000100 : Block size).</P>
<P>The "corrupted suffix pattern" message indicates that the application violated the data integrity pattern that GFlags inserted after the end of the <nobr><i>pheap-buggy.exe</i></nobr> heap allocation.</P>
<H3><A NAME="49c0a9c8-8cab-4be7-b859-ad3aec119c40"></A>Step 4: Display the call stack</H3>
<P>In the next step, use the addresses that NTSD reported to locate the function that caused the error. The next two commands turn on line number dumping in the debugger and display the call stack with line numbers.</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>C:\&gt;<b>.lines</b><BR><BR>Line number information will be loaded <BR><BR>C:\&gt;<b>kb</b><BR><BR>ChildEBP RetAddr  Args to Child<BR>WARNING: Stack unwind information not available. Following frames may be wrong.<BR>0006fc5c 77f9e6dd 00000008 77f9e3e8 00c81000 ntdll!DbgBreakPoint<BR>0006fcd8 77f9f3c8 00c81000 00000004 00d81eb0 ntdll!RtlpNtEnumerateSubKey+0x2879<BR>0006fcfc 77f9f5bb 00c81000 01001002 00000010 ntdll!RtlpNtEnumerateSubKey+0x3564<BR>0006fd4c 77fa261e 00c80000 01001002 00d81eb0 ntdll!RtlpNtEnumerateSubKey+0x3757<BR>0006fdc0 77fc0dc2 00c80000 01001002 00d81eb0 ntdll!RtlpNtEnumerateSubKey+0x67ba<BR>0006fe78 77fbd87b 00c80000 01001002 00d81eb0 ntdll!RtlSizeHeap+0x16a8<BR>0006ff24 010013a4 00c80000 01001002 00d81eb0 ntdll!RtlFreeHeap+0x69<BR>0006ff3c 01001450 00000000 00000001 0006ffc0 pheap-buggy!TestCorruptAfterEnd+0x2b [d:\nttest\base\testsrc\kernel\rtl\pageheap\pheap-buggy.cxx @ 185]<BR>0006ff4c 0100157f 00000002 00c65a68 00c631d8 pheap-buggy!main+0xa9 [d:\nttest\base\testsrc\kernel\rtl\pageheap\pheap-buggy.cxx @ 69]<BR>0006ffc0 77de43fe 00000000 00000001 7ffdf000 pheap-buggy!mainCRTStartup+0xe3 [crtexe.c @ 349]<BR>0006fff0 00000000 0100149c 00000000 78746341 kernel32!DosPathToSessionPathA+0x204<BR><BR></nobr></P>
<P>As a result, the debugger displays the call stack for <nobr><i>pheap-buggy.exe</i></nobr> with line numbers. The call stack display shows that the error occurred when the <b>TestCorruptAfterEnd</b> function in <nobr><i>pheap-buggy.exe</i></nobr><i> </i>tried to free an allocation at 0x00c80000 by calling <b>HeapFree</b>, a redirect to <b>RtlFreeHeap</b>.</P>
<P>The most likely cause of this error is that the program wrote past the end of the buffer that it allocated in this function.</P>
<H3><A NAME="8e5de874-e4b2-4db7-84ad-fe4a5a74c846"></A>Step 5: Enable full page heap verification</H3>
<P>Unlike standard page heap verification, full page heap verification can catch the misuse of this heap buffer as soon as it occurs. The following command enables full page heap verification for <nobr><i>pheap-buggy.exe</i></nobr>:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr><b>gflags /p /enable pheap-buggy.exe /full</b><BR><BR></nobr></P>
<H3><A NAME="4c626dd9-aef3-46f0-aec8-248605eed12f"></A>Step 6: Verify that full page heap is enabled</H3>
<P>The following command lists the programs for which page heap verification is enabled:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr><b>gflags /p</b><BR><BR></nobr></P>
<P>In response, GFlags displays the following list of programs. In this display, <b>traces</b> indicates standard page heap verification, and <b>full traces</b> indicates full page heap verification. In this case, <nobr><i>pheap-buggy.exe</i></nobr> is listed with <b>full traces</b>, indicating that full page heap verification is enabled, as intended.</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>pheap-buggy.exe: page heap enabled with flags (full traces )<BR><BR></nobr></P>
<H3><A NAME="55a0a4cc-b1e2-4d70-b12f-9ec506d067df"></A>Step 7: Run the debugger again</H3>
<P>The following command runs the <b>CorruptAfterEnd</b> function of <nobr><i>pheap-buggy.exe</i></nobr> in the NTSD debugger with the <b>-g</b> (ignore initial breakpoint) and <b>-x</b> (set second-chance break on access violation exceptions) parameters:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr><b>ntsd -g -x pheap-buggy /CorruptAfterEnd</b><BR><BR></nobr></P>
<P>When the application fails, NTSD generates the following display, which indicates that it detected an error in <nobr><i>pheap-buggy.exe</i></nobr>:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>Page heap: process 0x5BC created heap @ 00880000 (00980000, flags 0x3)<BR>ModLoad: 77db0000 77e8c000   kernel32.dll<BR>ModLoad: 78000000 78046000   MSVCRT.dll<BR>Page heap: process 0x5BC created heap @ 00B60000 (00C60000, flags 0x3)<BR>Page heap: process 0x5BC created heap @ 00C80000 (00D80000, flags 0x3)<BR>Access violation - code c0000005 (first chance)<BR>Access violation - code c0000005 (!!! second chance !!!)<BR>eax=00c86f00 ebx=00000000 ecx=77fbd80f edx=00c85000 esi=00c80000 edi=00c16fd0<BR>eip=01001398 esp=0006ff2c ebp=0006ff4c iopl=0         nv up ei pl nz na po nc<BR>cs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000206<BR>pheap-buggy!TestCorruptAfterEnd+1f:<BR>01001398 889801010000     mov     [eax+0x101],bl          ds:0023:00c87001=??<BR><BR></nobr></P>
<P>With full page heap verification enabled, the debugger breaks at an access violation. To find the precise location of the access violation, turn on line number dumping and display the call stack trace.</P>
<P>The numbered call stack trace appears as follows: The line displaying the problem appears in bold text.</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>ChildEBP RetAddr  Args to Child<BR>0006ff3c 01001450 00000000 00000001 0006ffc0 pheap-buggy!TestCorruptAfterEnd+0x1f <b>[d:\nttest\base\testsrc\kernel\rtl\pageheap\pheap-buggy.cxx @ 184]</b><BR>0006ff4c 0100157f 00000002 00c16fd0 00b70eb0 pheap-buggy!main+0xa9 [d:\nttest\base\testsrc\kernel\rtl\pageheap\pheap-buggy.cxx @ 69]<BR>0006ffc0 77de43fe 00000000 00000001 7ffdf000 pheap-buggy!mainCRTStartup+0xe3 [crtexe.c @ 349]<BR>WARNING: Stack unwind information not available. Following frames may be wrong.<BR>0006fff0 00000000 0100149c 00000000 78746341 kernel32!DosPathToSessionPathA+0x204<BR><BR></nobr></P>
<P>The stack trace shows that the problem occurs in line 184 of <nobr><i>pheap-buggy.exe</i></nobr>. Because full page heap verification is enabled, the call stack starts in the program code, not in a system DLL. As a result, the violation was caught where it happened, instead of when the heap block was freed.</P>
<H3><A NAME="db386ddd-5cd2-4414-ab6d-b93eaadff2db"></A>Step 8: Locate the error in the code</H3>
<P>A quick inspection reveals the cause of the problem: The program tries to write to the 257th byte (0x101) of a 256-byte (0x100) buffer, a common off-by-one error.</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>*((PCHAR)Block + 0x100) = 0;<BR><BR></nobr></P>
<P></P>
<DIV style="display:yes"></DIV>
<DIV CLASS="footer"><br><A href="dbglegal.htm">© 2009 Microsoft Corporation</A><br><A href="mailto:windbgfb@microsoft.com?subject=documentation feedback [Debugger]: Example 12:  Using Page Heap Verification to Find a Bug RELEASE: (December 09, 2009)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AThe WDK team uses the feedback submitted to improve the WDK documentation. We do not use your e-mail address for any other purpose. We will remove your e-mail address from our system after the issue you are reporting has been resolved. While we are working to resolve this issue, we may send you an e-mail message to request more information about your feedback. After the issues have been addressed, we may send you an e-mail message to let you know that your feedback has been addressed.%0A%0AFor more information about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx.
              ">Send feedback on this topic</A><br>Debugging Tools for Windows<br>December 09, 2009<br></DIV>
</Body>
</HTML>
