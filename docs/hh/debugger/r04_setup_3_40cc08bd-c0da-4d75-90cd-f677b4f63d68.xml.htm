<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML DIR="LTR" xmlns:MSHelp="http://msdn.microsoft.com/MSHelp">
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<TITLE>Enabling Postmortem Debugging</TITLE>
<META NAME="ms.locale" content="en-us">
<META NAME="DESCRIPTION" CONTENT="Debugger, Debugger, Design Guide, Enabling Postmortem Debugging"><xml><MSHelp:Keyword Index="A" Term="r04_setup_3_40cc08bd-c0da-4d75-90cd-f677b4f63d68.xml"/>
<META NAME="MS-HKWD" CONTENT="postmortem debugging">
<META NAME="MS-HKWD" CONTENT="just-in-time debugging">
<META NAME="MS-HKWD" CONTENT="just-in-time debugging, [See &quot;postmortem debugging&quot;]">
<META NAME="MS-HKWD" CONTENT="JIT debugging">
<META NAME="MS-HKWD" CONTENT="JIT debugging, [See &quot;postmortem debugging&quot;]">
<META NAME="MS-HKWD" CONTENT="AeDebug registry key"></xml><LINK REL="stylesheet" type="text/css" href="backsdk4.css"><SCRIPT src="langref.js"></SCRIPT><style>dd {margin-bottom:0em; margin-left:1.9em; }</style>
<style>.divclass {behavior:url(#default#savehistory);}</style>
<META NAME="save" CONTENT="history">
</HEAD>
<Body topmargin="0">
<DIV STYLE="display:none;"></DIV>
<DIV STYLE="display:none;"></DIV>
<TABLE CLASS="buttonbarshade" CELLSPACING="0" border="0"><TR><TD NOWRAP="true"> </TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING="0">
<TR ID="hdr">
<TD NOWRAP="true" CLASS="runninghead">Debugging Tools for Windows</TD>
</TR>
</TABLE>
<H1><A NAME="r04_setup_3_40cc08bd-c0da-4d75-90cd-f677b4f63d68.xml"></A>Enabling Postmortem Debugging</H1>
<P>The most common application errors are called <i>exceptions</i>. These include access violations, division-by-zero errors, numerical overflows, and many other kinds of errors.</P>
<P>Applications can also cause <i>breakpoint interrupts</i>. These occur when Windows is unable to run the application (for example, when a necessary module cannot be loaded) or when a breakpoint is encountered. Breakpoints can be inserted into the code by a debugger, or invoked through a function such as <b>DbgBreakPoint</b>. In assembly language, a breakpoint interrupt is generated by an <b>int 3</b> instruction.</P>
<P>Windows can handle user-mode errors in a variety of ways. The following sequence shows the precedence used for error handling:</P><B></B><OL type="1">
<LI>If a user-mode debugger is currently attached to the faulting process, all errors will cause the target to break into this debugger.<P>As long as the user-mode debugger is attached, no other error-handling methods will be used &#8212; even if the <a href="r16_cmds_c_3254135f-8902-45ee-a2dc-a52049ea903c.xml.htm"><b>gn (Go With Exception Not Handled)</b></a> command is used.   </P>
</LI>
<LI>If no user-mode debugger is attached and the executing code has its own exception handling routines (for example, <b>try - except</b>), this exception handling routine will attempt to deal with the error.</LI>
<LI>If no user-mode debugger is attached, <i>and</i> Windows has an open kernel-debugging connection, <i>and</i> the error is a breakpoint interrupt, Windows will attempt to contact the kernel debugger.<P>Kernel debugging connections must be opened during Windows' boot process. If you are using Windows Server 2003 or a later version of Windows and wish to prevent a user-mode interrupt from breaking into the kernel debugger, you can use the KDbgCtrl utility with the <b>-du</b> parameter. For details on how to configure kernel-debugging connections and how to use KDbgCtrl, see <a href="bootini_pageone_dbg_06095f76-d8a9-4397-880e-d9d461b84904.xml.htm">Configuring Software on the Target Computer</a>.</P>
<P>If Windows does attempt to contact a kernel debugger but there is no debugger running at the other end of the connection, Windows will freeze until kernel debugger is activated.</P>
<P>In the kernel debugger, you can use <a href="r16_cmds_c_bb7ab8a9-efe6-4feb-b234-e94d27848769.xml.htm"><b>gh (Go With Exception Handled)</b></a> to disregard the error and continue running the target. You can use <a href="r16_cmds_c_3254135f-8902-45ee-a2dc-a52049ea903c.xml.htm"><b>gn (Go With Exception Not Handled)</b></a> to bypass the kernel debugger and go on to step 4. </P>
</LI>
<LI>If the conditions in steps 1, 2, and 3 do not apply, Windows will activate a debugging tool. Any program can be selected in advance as the tool to use in this situation. The chosen program is referred to as the <i>postmortem debugger</i>. This is also known as the <i>just-in-time debugger</i> or the <i>JIT debugger</i>.<P>If the postmortem debugger is a standard user-mode debugger (such as CDB, WinDbg, or Microsoft Visual Studio), this debugger will start up and break into your application.</P>
<P>If the postmortem debugger is a tool for writing dump files (such as <a href="drwatson_92d60a12-6577-4cd5-a02f-a1ea8204719a.xml.htm">Dr. Watson</a>), a memory dump file will be created, and then the application will be terminated.</P>
</LI>
</OL>
<P></P>
<P class="note"><b>Note</b>  If Dr. Watson is activated on Windows XP or a later version of Windows, a message box will appear. This window gives you the option of sending an error report to Microsoft. If you choose <b>Don't Send</b>, a dump file will created and stored on your hard disk. If you choose <b>Send Error Report</b>, a dump file will be created and stored on your hard disk, and will also be transmitted to Microsoft over the internet.</P>
<P>If you have not reconfigured Windows' postmortem settings, Dr. Watson is used as the default postmortem debugger. This setting can be changed programmatically or through the registry; any changes take effect immediately.</P><B></B><UL type="disc">
<LI>To change the postmortem debugger to WinDbg, run <b>windbg -I</b>. (The <b>I</b> must be capitalized.) This command will display a success or failure message after it is used. When WinDbg is the postmortem debugger, it will be activated whenever an application crashes.</LI>
<LI>To change the postmortem debugger to CDB, run <b>cdb -iae</b> or <b>cdb -iaec </b><I><B>KeyString</B></I>. When the <b>-iaec</b> parameter is used, <i>KeyString</i> specifies a string to be appended to the end of command line used to launch the postmortem debugger. If <i>KeyString</i> contains spaces, it must be enclosed in quotation marks. This command will display no message if it succeeds, but will display a failure message if it fails. When CDB is the postmortem debugger, it will be activated whenever an application crashes.</LI>
<LI>To change the postmortem debugger to NTSD, run <b>ntsd -iae</b> or <b>ntsd -iaec </b><I><B>KeyString</B></I>. When the <b>-iaec</b> switch is used, <i>KeyString</i> specifies a string to be appended to the end of command line used to launch the postmortem debugger. If <i>KeyString</i> contains spaces, it must be enclosed in quotation marks. This command will display no message if it succeeds, but will display a failure message if it fails. When NTSD is the postmortem debugger, it will be activated whenever an application crashes.</LI>
<LI>To change the postmortem debugger back to Dr. Watson, run <b>drwtsn32 -i</b>. When Dr. Watson is the postmortem debugger, a memory dump file will be written to disk if an application crashes. See <a href="drwatson_6f519ccd-bd31-4d9a-8949-1134db5beda9.xml.htm">Dr. Watson Command-Line Options</a> for details.</LI>
</UL>
<P></P>
<P>These methods will set the appropriate registry values so that the debugger will be automatically launched whenever an applicaiton crashes. The debugger command line will include the argument string <nobr><b>-p %ld -e %ld -g</b></nobr>. The <nobr><b>-p %ld</b></nobr> parameter specifies the process ID that will be debugged, the <nobr><b>-e %ld</b></nobr> parameter provides the event that caused the exception, and the <nobr><b>-g</b></nobr> parameter causes the debugger to skip the initial breakpoint. If the <nobr><b>-iaec</b></nobr> switch is used when installing CDB or NTSD as the postmortem debugger, the additional arguments specified as <i>KeyString</i> will then follow. </P>
<P class="note"><b>Note  </b>Because the <nobr><b>-p %ld -e %ld -g</b></nobr> parameters always appear first on the command line of the postmortem debugger, you should not use the <nobr><b>-iaec</b></nobr> switch to specify the <nobr><b>-server</b></nobr> parameter because <nobr><b>-server</b></nobr> will not work unless it appears first on the command line.  To install a postmortem debugger that includes this parameter, you must edit the registry manually. </P>
<P>Only a system administrator can alter the postmortem settings.</P>
<P>If a postmortem debugger has been installed, you can deliberately break into the debugger from a user-mode application by calling the <b>DebugBreak</b> function.</P>
<H4>Editing the Registry</H4>
<P>The postmortem debugging settings are stored in the registry. If you wish to control these settings, it is recommended that you use the WinDbg, CDB, NTSD, or Dr. Watson commands described above; these will automatically change the relevant registry keys. If you do need to manually edit the registy, do so very carefully, since improper changes to the registry may render Windows unusable.</P>
<P>On an x86 computer, the postmortem settings are stored in the <b>\\HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\AeDebug</b> key.</P>
<P>On an Intel Itanium computer, there are two registry keys used for postmortem debugging:</P><B></B><OL type="1">
<LI>A failing 64-bit application will be debugged according to the settings stored in the <b>\\HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\AeDebug</b> key.</LI>
<LI>A failing 32-bit application will be debugged according to the settings stored in the <b>\\HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Windows NT\CurrentVersion\AeDebug</b> key. However, if the <b>Debugger</b> value in this key specifies an application in the <i>%windir%\system32</i> directory, Windows will look in <i>%windir%\syswow64</i> instead.   </LI>
</OL>
<P></P>
<P>When using an Itanium computer, it is often simplest to place identical values in each of these keys. In particular, if you are using WinDbg, CDB, or NTSD as your postmortem debugger, the same version will work for 32-bit and 64-bit user-mode applications on an Itanium computer. See <a href="r02_setup_1_bec62139-3e78-4a5a-9ff0-b525fe703d98.xml.htm">Choosing a 32-bit or 64-bit Debugger Package</a> for details.</P>
<P>There are two  registry values that should appear in these keys:</P>
<DL><DT><b>Debugger</b></DT>
<DD>This REG_SZ value specifies the debugger that will handle postmortem debugging. The <i>full path</i> to the debugger must be listed, unless the debugger is located in a directory that is in the default path.</DD>
<DT><b>Auto</b></DT>
<DD>This REG_SZ value is always either <b>0</b> or <b>1</b>. If <b>Auto</b> is set to <b>0</b>, a message box will be displayed prior to postmortem debugging.</DD>
</DL>
<P></P>
<P>When an unhandled application error occurs, Windows checks to see if the <b>Debugger</b> and <b>Auto</b> registry values exist.</P>
<P>If the <b>Auto</b> value is 0, a message box will appear.</P>
<P>In Windows 2000, the message box will have one of the following formats:</P><B></B><UL type="disc">
<LI>If the <b>Debugger</b> value contains the name of a valid debugger or Dr. Watson, the message box will have two buttons: <b>OK</b> and <b>Cancel</b>. If the <b>OK</b> button is pressed, the application will be terminated. If the <b>Cancel</b> button is pressed, the tool specified in the <b>Debugger</b> value will be started.</LI>
<LI>If the <b>Debugger</b> value is empty, the message box will have only an <b>OK</b> button and no debugger will start.</LI>
</UL>
<P></P>
<P>In Windows XP and later versions of Windows, the message box will have one of the following formats:</P><B></B><UL type="disc">
<LI>If the <b>Debugger</b> value contains the name of a valid debugger or Dr. Watson, the message box will have three buttons: <b>Send Error Report</b>, <b>Don't Send</b>, and <b>Debug</b>. If the <b>Don't Send</b> button is pressed, the application will be terminated. If the <b>Send Error Report</b> button is pressed, a minidump file will be sent to Microsoft and the application will be terminated. If the <b>Debug</b> button is pressed, the tool specified in the <b>Debugger</b> value will be started. (Note that all of these buttons have different effects than the buttons on the message window for Dr. Watson when the <b>Auto</b> value does not equal 0.)</LI>
<LI>If the <b>Debugger</b> value is empty, the message box will have only the <b>Send Error Report</b> and <b>Don't Send</b> buttons.</LI>
</UL>
<P></P>
<P>If the <b>Auto</b> value equals 1, no message box appears. The debugger referred to in the <b>Debugger</b> value is automatically started.</P>
<H4>Registry Examples</H4>
<P>The following registry values can be used to set Dr. Watson as the postmortem debugger (this is the default):</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>Debugger = "<b>drwtsn32 -p %ld -e %ld -g</b>"<BR>Auto = <b>1</b><BR><BR></nobr></P>
<P>The following values can be used to set WinDbg as the postmortem debugger:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>Debugger = "<i>Path</i><b>\WinDbg -p %ld -e %ld</b>"<BR>Auto = <b>1</b><BR><BR></nobr></P>
<P>The following values can be used to set CDB as the postmortem debugger:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>Debugger = "<i>Path</i><b>\CDB -p %ld -e %ld -g</b>"<BR>Auto = <b>1</b><BR><BR></nobr></P>
<P>In these examples, <i>Path</i> is the directory where the debugger is located, -<b>p %ld</b> specifies the process ID that will be debugged, -<b>e %ld</b> provides the event that caused the exception, and -<b>g</b> causes the debugger to skip the initial breakpoint. (Dr. Watson ignores the -<b>g</b> option.)</P>
<P></P>
<H4>Security Vulnerabilities</H4>
<P>If you are considering enabling postmortem debugging on a computer that you share with other people, see <a href="r11_security_c83dce6a-da9f-4b42-abb9-72afbb12bc7c.xml.htm">Security During Postmortem Debugging</a>.</P>
<P></P>
<DIV style="display:yes"></DIV>
<DIV CLASS="footer"><br><A href="dbglegal.htm">© 2009 Microsoft Corporation</A><br><A href="mailto:windbgfb@microsoft.com?subject=documentation feedback [Debugger]: Enabling Postmortem Debugging RELEASE: (December 09, 2009)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AThe WDK team uses the feedback submitted to improve the WDK documentation. We do not use your e-mail address for any other purpose. We will remove your e-mail address from our system after the issue you are reporting has been resolved. While we are working to resolve this issue, we may send you an e-mail message to request more information about your feedback. After the issues have been addressed, we may send you an e-mail message to let you know that your feedback has been addressed.%0A%0AFor more information about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx.
              ">Send feedback on this topic</A><br>Debugging Tools for Windows<br>December 09, 2009<br></DIV>
</Body>
</HTML>
