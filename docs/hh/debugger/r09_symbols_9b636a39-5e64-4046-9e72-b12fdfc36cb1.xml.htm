<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML DIR="LTR" xmlns:MSHelp="http://msdn.microsoft.com/MSHelp">
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<TITLE>Advanced SymSrv Use</TITLE>
<META NAME="ms.locale" content="en-us">
<META NAME="DESCRIPTION" CONTENT="Debugger, Debugger, Design Guide, Advanced SymSrv Use"><xml><MSHelp:Keyword Index="A" Term="r09_symbols_9b636a39-5e64-4046-9e72-b12fdfc36cb1.xml"/>
<META NAME="MS-HKWD" CONTENT="SymSrv, features">
<META NAME="MS-HKWD" CONTENT="caching symbols">
<META NAME="MS-HKWD" CONTENT="symbol servers, caching">
<META NAME="MS-HKWD" CONTENT="symbols, caching">
<META NAME="MS-HKWD" CONTENT="symbol servers, downstream store">
<META NAME="MS-HKWD" CONTENT="downstream store (symbol server)"></xml><LINK REL="stylesheet" type="text/css" href="backsdk4.css"><SCRIPT src="langref.js"></SCRIPT><style>dd {margin-bottom:0em; margin-left:1.9em; }</style>
<style>.divclass {behavior:url(#default#savehistory);}</style>
<META NAME="save" CONTENT="history">
</HEAD>
<Body topmargin="0">
<DIV STYLE="display:none;"></DIV>
<DIV STYLE="display:none;"></DIV>
<TABLE CLASS="buttonbarshade" CELLSPACING="0" border="0"><TR><TD NOWRAP="true"> </TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING="0">
<TR ID="hdr">
<TD NOWRAP="true" CLASS="runninghead">Debugging Tools for Windows</TD>
</TR>
</TABLE>
<H1><A NAME="r09_symbols_9b636a39-5e64-4046-9e72-b12fdfc36cb1.xml"></A>Advanced SymSrv Use</H1>
<P>SymSrv can deliver symbol files from a centralized symbol store. This store can contain any number of symbol files, corresponding to any number of programs or operating systems. The store can also contain binary files (this is useful when debugging minidumps).</P>
<P>The store can contain the actual symbol and binary files, or it can simply contain pointers to symbol files. If the store contains pointers, SymSrv will retrieve the actual files directly from their sources.</P>
<P>SymSrv can also be used to separate a large symbol store into a smaller subset that is appropriate for a specialized debugging task.</P>
<P>Finally, SymSrv can obtain symbol files from an HTTP or HTTPS source using the logon information provided by the operating system. SymSrv supports HTTPS sites protected by smartcards, certificates, and regular logins and passwords.  For more information, see <a href="r09_symbols_a0af9a12-53b2-477f-a7aa-57a27f442437.xml.htm">HTTP Symbol Stores</a>. </P>
<H4>Setting the Symbol Path</H4>
<P>To use this symbol server, <i>symsrv.dll</i> must be installed in the same directory as the debugger. The symbol path must be set in one of the following ways:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr><b>set _NT_SYMBOL_PATH = symsrv*</b><i>ServerDLL</i><b>*</b><i>DownstreamStore</i><b>*</b><i>\\Server\Share</i> <BR><BR><b>set _NT_SYMBOL_PATH = symsrv*</b><i>ServerDLL</i><b>*</b><i>\\Server\Share</i> <BR><BR><b>set _NT_SYMBOL_PATH = srv*</b><i>DownstreamStore</i><b>*</b><i>\\Server\Share</i> <BR><BR><b>set _NT_SYMBOL_PATH = srv*</b><i>\\Server\Share</i> <BR><BR></nobr></P>
<P>The parts of this syntax are explained as follows:</P>
<DL><DT><b>symsrv</b> </DT>
<DD>This keyword must always appear first. It indicates to the debugger that this item is a symbol server, not just a normal symbol directory.</DD>
<DT><i>ServerDLL</i> </DT>
<DD>Specifies the name of the symbol server DLL. If you are using the SymSrv symbol server, this will always be <b>symsrv.dll</b>.</DD>
<DT><b>srv</b> </DT>
<DD>This is shorthand for <b>symsrv*symsrv.dll</b>.</DD>
<DT><i>DownstreamStore</i> </DT>
<DD>Specifies the downstream store. This is a local directory or network share that will be used to cache individual symbol files.<P>You can specify more than one downstream store, separated by asterisks. Multiple downstream stores are explained in <b>Cascading Downstream Stores</b> further down on this page.</P>
<P>If you include two asterisks in a row where a downstream store would normally be specified, then the default downstream store is used. This store will be located in the <i>sym</i> subdirectory of the home directory. The home directory defaults to the debugger installation directory; this can be changed by using the <a href="r25_exts_general_he_9b31ba76-7378-454b-9192-3501fa2fedb6.xml.htm"><b>!homedir</b></a> extension or by setting the DBGHELP_HOMEDIR environment variable.</P>
<P>If <i>DownstreamStore</i> specifies a directory that does not exist, SymStore will attempt to create it.</P>
<P>If the <i>DownstreamStore</i> parameter is omitted and no extra asterisk is included &#8212; in other words, if you use <b>srv</b> with exactly one asterisk or <b>symsrv</b> with exactly two asterisks &#8212; then no downstream store will be created. The debugger will load all symbol files directly from the server, without caching them locally.</P>
<P class="note"><b>Note</b>  If you are accessing symbols from an HTTP or HTTPS site, or if the symbol store uses compressed files, a downstream store is always used. If no downstream store is specified, one will be created in the <i>sym</i> subdirectory of the home directory.</P>
</DD>
<DT><i>\\Server\Share</i></DT>
<DD>Specifies the server and share of the remote symbol store. </DD>
<P></P>
</DL>
<P>If a downstream store is used, the debugger will first look for a symbol file in this store. If the symbol file is not found, the debugger will locate the symbol file from the specified <i>Server</i> and <i>Share</i>, and then cache a copy of this file in the downstream store. The file will be copied to a subdirectory in the tree under <i>DownstreamStore</i> which corresponds to its location in the tree under <i>\\Server\Share</i>.</P>
<P>The symbol server does not have to be the only entry in the symbol path. If the symbol path consists of multiple entries, the debugger checks each entry for the needed symbol files, in order (from left to right), regardless of whether a symbol server or an actual directory is named.</P>
<P>Here are some examples. To use SymSrv as the symbol server with a symbol store on <i>\\mybuilds\mysymbols</i>, set the following symbol path:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>set _NT_SYMBOL_PATH= symsrv*symsrv.dll*\\mybuilds\mysymbols<BR><BR></nobr></P>
<P>To set the symbol path so that the debugger will copy symbol files from a symbol store on <i>\\mybuilds\mysymbols</i> to your local directory <i>c:\localsymbols</i>, use: </P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>set _NT_SYMBOL_PATH=symsrv*symsrv.dll*c:\localsymbols*\\mybuilds\mysymbols<BR><BR></nobr></P>
<P>To set the symbol path so that the debugger will copy symbol files from the HTTP site <i>www.company.com/manysymbols</i> to a local network directory <i>\\localserver\myshare\mycache</i>, use: </P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>set _NT_SYMBOL_PATH=symsrv*symsrv.dll*\\localserver\myshare\mycache*http://www.company.com/manysymbols<BR><BR></nobr></P>
<P>This last example can also be shortened as such:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>set _NT_SYMBOL_PATH=srv*\\localserver\myshare\mycache*http://www.company.com/manysymbols<BR><BR></nobr></P>
<P>In addition, the symbol path can contain several directories or symbol servers, separated by semicolons. This allows you to locate symbols from multiple locations (or even multiple symbol servers). If a binary has a mismatched symbol file, the debugger cannot locate it using the symbol server because it checks only for the exact parameters<i>.</i> However, the debugger may find a mismatched symbol file with the correct name, using the traditional symbol path, and successfully load it. Even though the file is technically not the correct symbol file, it might provide useful information.</P>
<H4>Compressed Files</H4>
<P>SymSrv is compatible with symbol stores that contain compressed files, as long as this compression has been done with the <i>compress.exe</i> tool that is distributed with the Microsoft Windows SDK. Compressed files should have an underscore as the last character in their file extensions (for example, <i>module1.pd_</i> or <i>module2.db_</i>). For details, see <a href="r09_symbols_d033164e-0b4c-4e3b-b534-b39437bc4d3b.xml.htm">SymStore</a>.</P>
<P>If the files on the store are compressed, you must use a downstream store. SymSrv will uncompress all files before caching them on the downstream store.</P>
<H4>Deleting the Cache</H4>
<P>If you are using a <i>DownstreamStore</i> as a cache, you can delete this directory at any time to save disk space.</P>
<P>It is possible to have a vast symbol store that includes symbol files for many different programs or Windows versions. If you upgrade the version of Windows used on your target computer, the cached symbol files will all match the earlier version. These cached files will not be of any further use, and therefore this might be a good time to delete the cache.</P>
<H4>Cascading Downstream Stores</H4>
<P>You can specify any number of downstream stores, separated by asterisks. These stores are known as <i>cascading symbol stores</i>.</P>
<P>After the initial <b>srv*</b> or <b>symsrv*</b><i>ServerDLL</i><b>*</b>, each subsequent token represents a symbol location. The token furthest left is checked first. An empty token &#8212; indicated by two asterisks in a row, or by an asterisk at the end of the string &#8212; represents the default downstream store.</P>
<P>Here is an example of a symbol path that uses two downstream stores to hold information from the main symbol store being accessed. These could be called the master store, the mid-level store, and the local cache:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>srv*c:\localcache*\\interim\store*http://msdl.microsoft.com/download/symbols<BR><BR></nobr></P>
<P>In this scenario, SymSrv will first look in <i>c:\localcache</i> for a symbol file. If it is found there, it will return a path to it. If it is not found there, it will look in <i>\\interim\store</i>. If the symbol file is found there, SymSrv will copy it to <i>c:\localcache</i> and return the path. If it is not found there, SymSrv will look in the <a href="r09_symbols_7bd43120-4e98-4568-a44f-0fe75ee0ac12.xml.htm">Microsoft public symbol store</a> at http://msdl.microsoft.com/download/symbols; if the file is found there, SymSrv will copy it to both <i>\\interim\store</i> and <i>c:\localcache</i>.</P>
<P>A similar behavior would be obtained by using the following path:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>srv**\\interim\store*http://internetsite<BR><BR></nobr></P>
<P>In this case, the local cache is the default downstream store and the master store is an internet site. A mid-level store of <i>\\interim\store</i> has been specified for use in between the other two.</P>
<P>When SymSrv processes a path that contains cascading stores, it will skip any store that it cannot read or write to. So if a share goes down, it will copy the file to the store downstream from the missing store without any error. A nice side effect of this error is that the user can specify more than one master store that feeds a single stream of downstream stores as long as the master stores are not writable.</P>
<P>When a compressed symbol file is retrieved from the master store, it will be stored in compressed form in any mid-level store. The file will be uncompressed in the bottom-most store in the path.</P>
<P></P>
<H4>cache*<i>localsymbolcache</i></H4>
<P>Another way to create a local cache of symbols is by using the <b>cache*</b><i>localsymbolcache</i> string in your symbol path.  This is not part of the symbol server element, but a separate element in your symbol path.  The debugger will use the specified directory <i>localsymbolcache</i> to store any symbols loaded from any element that appears in your symbol path to the right of this string. This allows you to use a local cache for symbols downloaded from any location, not just those downloaded by a symbol server.</P>
<P>For example, the following symbol path will not cache symbols taken from <i>\\someshare</i>.  It will use <i>c:\mysymbols</i> to cache symbols taken from <i>\\anothershare</i>, because the element beginning with <i>\\anothershare</i> appears to the right of the <b>cache*c:\mysymbols</b> element.  It will also use <i>c:\mysymbols</i> to cache symbols taken from the Microsoft public symbol store, because of the usual syntax used by the symbol server (<b>srv</b> with two or more asterisks).  Moreover, if you subsequently use the <b>.sympath+</b> command to add additional locations to this path, these new elements will also be cached, since they will be appended to the right side of the path.</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>_NT_SYMBOL_PATH=\\someshare\that\cachestar\ignores;srv*c:\mysymbols*http://msdl.microsoft.com/download/symbols;cache*c:\mysymbols;\\anothershare\that\gets\cached<BR></nobr></P>
<P></P>
<H4>How SymSrv Locates Files</H4>
<P>SymSrv creates a fully-qualified UNC path to the desired symbol file. This path begins with the path to the symbol store recorded in the _NT_SYMBOL_PATH environment variable. The <b>SymbolServer</b> routine is then used to identify the name of the desired file; this name is appended to the path as a directory name. Another directory name, consisting of the concatenation of the <i>id</i>, <i>two</i>, and <i>three</i> parameters passed to <b>SymbolServer</b>, is then appended. If any of these values is zero, they are omitted.</P>
<P>The resulting directory is searched for the symbol file, or a symbol store pointer file.</P>
<P>If this search is successful, <b>SymbolServer</b> passes the path to the caller and returns TRUE. If the file is not found, <b>SymbolServer</b> returns FALSE.</P>
<H4>Using AgeStore to Reduce the Cache Size</H4>
<P>The AgeStore tool can be used to delete cached files that are older than a specified date, or to reduce the contents of the cache below a specified size.  This can be useful if your downstream store is too large.  For details, see <a href="symchk_578d84f8-168a-40be-84c7-44815ac942c5.xml.htm">AgeStore</a>. </P>
<P></P>
<P></P>
<DIV style="display:yes"></DIV>
<DIV CLASS="footer"><br><A href="dbglegal.htm">© 2009 Microsoft Corporation</A><br><A href="mailto:windbgfb@microsoft.com?subject=documentation feedback [Debugger]: Advanced SymSrv Use RELEASE: (December 09, 2009)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AThe WDK team uses the feedback submitted to improve the WDK documentation. We do not use your e-mail address for any other purpose. We will remove your e-mail address from our system after the issue you are reporting has been resolved. While we are working to resolve this issue, we may send you an e-mail message to request more information about your feedback. After the issues have been addressed, we may send you an e-mail message to let you know that your feedback has been addressed.%0A%0AFor more information about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx.
              ">Send feedback on this topic</A><br>Debugging Tools for Windows<br>December 09, 2009<br></DIV>
</Body>
</HTML>
