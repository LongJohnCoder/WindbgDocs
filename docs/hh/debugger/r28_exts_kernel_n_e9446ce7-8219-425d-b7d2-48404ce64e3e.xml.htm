<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML DIR="LTR" xmlns:MSHelp="http://msdn.microsoft.com/MSHelp">
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<TITLE>!process</TITLE>
<META NAME="ms.locale" content="en-us">
<META NAME="DESCRIPTION" CONTENT="Debugger, Debugger, Design Guide, !process"><xml><MSHelp:Keyword Index="A" Term="r28_exts_kernel_N_e9446ce7-8219-425d-b7d2-48404ce64e3e.xml"/>
<META NAME="MS-HKWD" CONTENT="!process extension">
<META NAME="MS-HKWD" CONTENT="process, Process Summary (!process) extension"></xml><LINK REL="stylesheet" type="text/css" href="backsdk4.css"><SCRIPT src="langref.js"></SCRIPT><style>dd {margin-bottom:0em; margin-left:1.9em; }</style>
<style>.divclass {behavior:url(#default#savehistory);}</style>
<META NAME="save" CONTENT="history">
</HEAD>
<Body topmargin="0">
<DIV STYLE="display:none;"></DIV>
<DIV STYLE="display:none;"></DIV>
<TABLE CLASS="buttonbarshade" CELLSPACING="0" border="0"><TR><TD NOWRAP="true"> </TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING="0">
<TR ID="hdr">
<TD NOWRAP="true" CLASS="runninghead">Debugging Tools for Windows</TD>
</TR>
</TABLE>
<H1><A NAME="r28_exts_kernel_N_e9446ce7-8219-425d-b7d2-48404ce64e3e.xml"></A>!process</H1>
<P><P>The <b>!process</b> extension displays information about the specified process, or about all processes, including the EPROCESS block.</P>
<P>This extension can be used only during kernel-mode debugging.</P>
</P>
<H4>Syntax</H4>
<P>Syntax in Windows 2000:</P>
<P style="background:#dddddd;cursor:text;padding:2pt,4pt;font: 100% Courier New, Courier, mono;"><nobr><b>!process</b> [<b>/s</b> <i>Session</i>] [<i>Process</i> [<i>Flags</i>]] <BR><b>!process</b> [<b>/s</b> <i>Session</i>] <b>0</b> <i>Flags ImageName</i> <BR></nobr></P>
<P></P>
<P>Syntax in Windows XP and later:</P>
<P style="background:#dddddd;cursor:text;padding:2pt,4pt;font: 100% Courier New, Courier, mono;"><nobr><b>!process</b> [<b>/s</b> <i>Session</i>] [/<b>m </b><i>Module</i>] [<i>Process</i> [<i>Flags</i>]] <BR><b>!process</b> [<b>/s</b> <i>Session</i>] [/<b>m </b><i>Module</i>] <b>0</b> <i>Flags ImageName</i> <BR></nobr></P>
<P></P>
<P></P>
<DL><H4>Parameters</H4>
<DT><b>/s</b> <i>Session</i></DT>
<DD>Specifies the session that owns the desired process.   </DD>
<DT><b>/m</b> <i>Module</i></DT>
<DD>(<i>Windows XP and later only</i>) Specifies the module that owns the desired process.   </DD>
<DT><i>Process</i></DT>
<DD>Specifies the hexadecimal address or the process ID of the process on the target computer. <P>The value of <i>Process</i> determines whether the <b>!process</b> extension displays a process address or a process ID . If <i>Process</i> is omitted in any version of Windows, the debugger displays data only about the current system process. If <i>Process</i> is <b>0</b> and <i>ImageName</i> is omitted, the debugger displays information about all active processes.</P>
</DD>
<DT><i>Flags</i></DT>
<DD>Specifies the level of detail to display. <i>Flags</i> can be any combination of the following bits. If <i>Flags</i> is 0, only a minimal amount of information is displayed. The default varies according to the version of Windows and the value of <i>Process.</i> In Windows 2000, the default is 0x3 if <i>Process </i>is omitted or if <i>Process</i> is 0 and <i>ImageFile</i> is omitted; otherwise, the default is 0xF. In Windows XP and later, the default is 0x3 if <i>Process</i> is omitted or if <i>Process </i>is either 0 or -1; otherwise, the default is 0xF.<DL><DT>Bit 0 (0x1)</DT>
<DD>Displays time and priority statistics.</DD>
<DT>Bit 1 (0x2)</DT>
<DD>Displays a list of threads and events associated with the process, and their wait states.</DD>
<DT>Bit 2 (0x4)</DT>
<DD>Displays a list of threads associated with the process. If this is included without Bit 1 (0x2), each thread is displayed on a single line. If this is included along with Bit 1, each thread is displayed with a stack trace.</DD>
<DT>Bit 3 (0x8)</DT>
<DD><i>(Windows XP and later)</i>  Displays the return address, the stack pointer, and (on Itanium-based systems) the <b>bsp</b> register value for each function. The display of function arguments is suppressed.</DD>
<DT>Bit 4 (0x10)</DT>
<DD><i>(Windows XP and later)</i>  Sets the process context equal to the specified process for the duration of this command. This results in a more accurate display of thread stacks. Because this flag is equivalent to using <a href="r21_metacmds_l_b8eace76-f3f6-4f0c-96fc-0c9d8dd572cc.xml.htm"><b>.process /p /r</b></a> for the specified process, any existing user-mode module list will be discarded. If <i>Process</i> is zero, the debugger displays all processes, and the process context is changed for each one. If you are only displaying a single process and its user-mode state has already been refreshed (for example, with <b>.process /p /r</b>), it is not necessary to use this flag. This flag is only effective when used with Bit 0 (0x1). </DD>
</DL>
</DD>
<DT><i>ImageName</i></DT>
<DD>Specifies the name of the process to be displayed. The debugger displays all processes whose executable image names match <i>ImageName</i>. The image name must match that in the EPROCESS block. In general, this is the executable name that was invoked to start the process, including the file extension (usually <i>.exe</i>), and truncated after the fifteenth character. There is no way to specify an image name that contains a space. When <i>ImageName</i> is specified, <i>Process</i> must be zero.<P></P>
</DD>
</DL>
<P></P>
<H4>DLL</H4><B></B><table>
<TR valign="top">
<TD Width=""><b>Windows 2000</b></TD>
<TD Width=""><i>Kdextx86.dll</i> </TD>
</TR>
<TR valign="top">
<TD Width=""><b>Windows XP and later</b></TD>
<TD Width=""><i>Kdexts.dll</i> </TD>
</TR>
</table>
<P></P>
<P></P>
<H4>Comments</H4>
<P>The following is an example of a <b>!process 0 0</b> display:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>kd&gt;<b> !process 0 0</b><BR>**** NT ACTIVE PROCESS DUMP ****<BR>PROCESS 80a02a60  Cid: 0002    Peb: 00000000  ParentCid: 0000<BR>    DirBase: 00006e05  ObjectTable: 80a03788  TableSize: 150.<BR>    Image: System<BR>PROCESS 80986f40  Cid: 0012    Peb: 7ffde000  ParentCid: 0002<BR>    DirBase: 000bd605  ObjectTable: 8098fce8  TableSize:  38.<BR>    Image: smss.exe<BR>PROCESS 80958020  Cid: 001a    Peb: 7ffde000  ParentCid: 0012<BR>    DirBase: 0008b205  ObjectTable: 809782a8  TableSize: 150.<BR>    Image: csrss.exe<BR>PROCESS 80955040  Cid: 0020    Peb: 7ffde000  ParentCid: 0012<BR>    DirBase: 00112005  ObjectTable: 80955ce8  TableSize:  54.<BR>    Image: winlogon.exe<BR>PROCESS 8094fce0  Cid: 0026    Peb: 7ffde000  ParentCid: 0020<BR>    DirBase: 00055005  ObjectTable: 80950cc8  TableSize: 222.<BR>    Image: services.exe<BR>PROCESS 8094c020  Cid: 0029    Peb: 7ffde000  ParentCid: 0020<BR>    DirBase: 000c4605  ObjectTable: 80990fe8  TableSize: 110.<BR>    Image: lsass.exe<BR>PROCESS 809258e0  Cid: 0044    Peb: 7ffde000  ParentCid: 0026<BR>    DirBase: 001e5405  ObjectTable: 80925c68  TableSize:  70.<BR>    Image: SPOOLSS.EXE<BR><BR></nobr></P>
<P>The following table describes some of the elements of the <b>!process 0 0</b> output.</P><B></B><table>
<TR valign="top">
<TH Width="">Element</TH>
<TH Width="">Meaning</TH>
</TR>
<TR valign="top">
<TD Width=""><b>Process address</b></TD>
<TD Width="">The eight-character hexadecimal number after the word <i>PROCESS</i> is the address of the EPROCESS block. In the final entry in the preceding example, the process address is 0x809258E0.</TD>
</TR>
<TR valign="top">
<TD Width=""><b>Process ID (PID)</b></TD>
<TD Width="">The hexadecimal number after the word <i>Cid</i>. In the final entry in the preceding example, the PID is 0x44, or decimal 68.</TD>
</TR>
<TR valign="top">
<TD Width=""><b>Process Environment Block (PEB)</b></TD>
<TD Width="">The hexadecimal number after the word <i>Peb</i> is the address of the process environment block. In the final entry in the preceding example, the PEB is located at address 0x7FFDE000.</TD>
</TR>
<TR valign="top">
<TD Width=""><b>Parent process PID</b></TD>
<TD Width="">The hexadecimal number after the word <i>ParentCid</i> is the PID of the parent process. In the final entry in the preceding example, the parent process PID is 0x26, or decimal 38.</TD>
</TR>
<TR valign="top">
<TD Width=""><b>Image</b></TD>
<TD Width="">The name of the module that owns the process. In the final entry in the preceding example, the owner is <i>spoolss.exe</i>. In the first entry, the owner is the operating system itself.</TD>
</TR>
<TR valign="top">
<TD Width=""><b>Process object address</b></TD>
<TD Width="">The hexadecimal number after the word <i>ObjectTable</i>. In the final entry in the preceding example, the address of the process object is 0x80925c68. </TD>
</TR>
</table>
<P></P>
<P></P>
<P>To display full details on one process, set <i>Flags</i> to 7. The process itself can be specified by setting <i>Process</i> equal to the process address, setting <i>Process</i> equal to the process ID, or setting <i>ImageName</i> equal to the executable image name. Here is an example:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr><b>kd&gt; !process fb667a00 7</b><BR>PROCESS fb667a00 Cid: 0002  Peb: 00000000 ParentCid: 0000<BR>  DirBase: 00030000 ObjectTable: e1000f88 TableSize: 112.<BR>  Image: System<BR>  VadRoot fb666388 Clone 0 Private 4. Modified 9850. Locked 0.<BR>  FB667BBC MutantState Signalled OwningThread 0<BR>  Token               e10008f0<BR>  ElapsedTime            15:06:36.0338<BR>  UserTime             0:00:00.0000<BR>  KernelTime            0:00:54.0818<BR>  QuotaPoolUsage[PagedPool]     1480<BR>Working Set Sizes (now,min,max) (3, 50, 345)<BR>  PeakWorkingSetSize        118<BR>  VirtualSize            1 Mb<BR>  PeakVirtualSize          1 Mb<BR>  PageFaultCount          992<BR>  MemoryPriority          BACKGROUND<BR>  BasePriority           8<BR>  CommitCharge           8<BR><BR>    THREAD fb667780 Cid 2.1 Teb: 00000000 Win32Thread: 80144900 WAIT: (WrFreePage) KernelMode Non-Alertable<BR>    80144fc0 SynchronizationEvent<BR>    Not impersonating<BR>    Owning Process fb667a00<BR>    WaitTime (seconds)   32278<BR>    Context Switch Count  787<BR>    UserTime         0:00:00.0000<BR>    KernelTime        0:00:21.0821<BR>    Start Address Phase1Initialization (0x801aab44)<BR>    Initial Sp fb26f000 Current Sp fb26ed00<BR>    Priority 0 BasePriority 0 PriorityDecrement 0 DecrementCount 0<BR><BR>    ChildEBP RetAddr Args to Child<BR>    fb26ed18 80118efc c0502000 804044b0 00000000 KiSwapThread+0xb5<BR>    fb26ed3c 801289d9 80144fc0 00000008 00000000 KeWaitForSingleObject+0x1c2<BR><BR></nobr></P>
<P>Note that the address of the process object can be used as input to other extensions, such as <a href="r24_exts_general_a_48ae5bbf-e2df-4d21-835f-9721a17c40dd.xml.htm"><b>!handle</b></a>, to obtain further information.</P>
<P>The following table describes some of the elements in the previous example.</P><B></B><table>
<TR valign="top">
<TH Width="">Element</TH>
<TH Width="">Meaning</TH>
</TR>
<TR valign="top">
<TH Width="">WAIT</TH>
<TH Width="">The parenthetical comment after this heading gives the reason for the wait. The command <a href="r16_cmds_c_94727332-6184-4ced-897b-d358ca7c173d.xml.htm">dt nt!_KWAIT_REASON</a> will display a list of all wait reasons.</TH>
</TR>
<TR valign="top">
<TD Width=""><b>ElapsedTime</b></TD>
<TD Width="">Lists the amount of time that has elapsed since the process was created. This is displayed in units of <i>Hours</i> <b>:</b> <i>Minutes</i> <b>:</b> <i>Seconds</i> <b>.</b> <i>Milliseconds</i>.</TD>
</TR>
<TR valign="top">
<TD Width=""><b>UserTime</b></TD>
<TD Width="">Lists the amount of time the process has been running in user mode. If the value for <b>UserTime</b> is exceptionally high, it might identify a process that is depleting system resources. Units are the same as those of <b>ElapsedTime</b>.</TD>
</TR>
<TR valign="top">
<TD Width=""><b>KernelTime</b></TD>
<TD Width="">Lists the amount of time the process has been running in kernel mode. If the value for <b>KernelTime</b> is exceptionally high, it might identify a process that is depleting system resources. Units are the same as those of <b>ElapsedTime</b>.</TD>
</TR>
<TR valign="top">
<TD Width=""><b>Working Set sizes</b></TD>
<TD Width="">Lists the current, minimum and maximum working set size for the process, in pages. An exceptionally large working set size can be a sign of a process that is leaking memory or depleting system resources.</TD>
</TR>
<TR valign="top">
<TD Width=""><b>QuotaPoolUsage entries</b></TD>
<TD Width="">Lists the paged and nonpaged pool used by the process. On a system with a memory leak, looking for excessive nonpaged pool usage on all the processes can tell you which process has the memory leak.</TD>
</TR>
<TR valign="top">
<TD Width=""><b>Clone</b></TD>
<TD Width="">Indicates whether or not the process was created by the POSIX or Interix subsystems.</TD>
</TR>
<TR valign="top">
<TD Width=""><b>Private</b></TD>
<TD Width="">Indicates the number of private (non-sharable) pages currently being used by the process. This includes both paged in and paged out memory.</TD>
</TR>
</table>
<P></P>
<P>In addition to the process list information, the thread information contains a list of the resources on which the thread has locks. This information is listed in the third line of output after the thread header. In this example, the thread has a lock on one resource, a <b>SynchronizationEvent</b> with an address of <b>80144fc0</b>. By comparing this address to the list of locks shown by the <a href="r27_exts_kernel_e_0a5e2949-f4ab-488f-bf59-72c3e15d7643.xml.htm"><b>!kdext*.locks</b></a> extension, you can determine which threads have exclusive locks on resources. </P>
<P>The <a href="r29_exts_kernel_q_e8bc89db-0e90-49e2-9899-99461f099edf.xml.htm"><b>!stacks</b></a> extension gives a brief summary of the state of every thread. This can be used instead of the <b>!process</b> extension to get a quick overview of the system, especially when debugging multithread issues, such as resource conflicts or deadlocks.</P>
<H4>Additional Information</H4>
<P>For information about processes in kernel mode, see <a href="r07_use_operation_bdab0129-28de-4392-a221-53a08bcc468e.xml.htm">Changing Contexts</a>. For more information about analyzing processes and threads, see <i>Microsoft Windows Internals,</i> by Mark Russinovich and David Solomon.</P>
<P></P>
<DIV style="display:yes"></DIV>
<DIV CLASS="footer"><br><A href="dbglegal.htm">© 2009 Microsoft Corporation</A><br><A href="mailto:windbgfb@microsoft.com?subject=documentation feedback [Debugger]: !process RELEASE: (December 09, 2009)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AThe WDK team uses the feedback submitted to improve the WDK documentation. We do not use your e-mail address for any other purpose. We will remove your e-mail address from our system after the issue you are reporting has been resolved. While we are working to resolve this issue, we may send you an e-mail message to request more information about your feedback. After the issues have been addressed, we may send you an e-mail message to let you know that your feedback has been addressed.%0A%0AFor more information about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx.
              ">Send feedback on this topic</A><br>Debugging Tools for Windows<br>December 09, 2009<br></DIV>
</Body>
</HTML>
