<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML DIR="LTR" xmlns:MSHelp="http://msdn.microsoft.com/MSHelp">
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<TITLE>Displaying a Critical Section</TITLE>
<META NAME="ms.locale" content="en-us">
<META NAME="DESCRIPTION" CONTENT="Debugger, Debugger, Design Guide, Displaying a Critical Section"><xml><MSHelp:Keyword Index="A" Term="t01_basic_0696c252-05c6-4f6f-b4c9-ad087b22de2b.xml"/>
<META NAME="MS-HKWD" CONTENT="critical section">
<META NAME="MS-HKWD" CONTENT="critical section, overview"></xml><LINK REL="stylesheet" type="text/css" href="backsdk4.css"><SCRIPT src="langref.js"></SCRIPT><style>dd {margin-bottom:0em; margin-left:1.9em; }</style>
<style>.divclass {behavior:url(#default#savehistory);}</style>
<META NAME="save" CONTENT="history">
</HEAD>
<Body topmargin="0">
<DIV STYLE="display:none;"></DIV>
<DIV STYLE="display:none;"></DIV>
<TABLE CLASS="buttonbarshade" CELLSPACING="0" border="0"><TR><TD NOWRAP="true"> </TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING="0">
<TR ID="hdr">
<TD NOWRAP="true" CLASS="runninghead">Debugging Tools for Windows</TD>
</TR>
</TABLE>
<H1><A NAME="t01_basic_0696c252-05c6-4f6f-b4c9-ad087b22de2b.xml"></A>Displaying a Critical Section</H1>
<P>Critical sections can be displayed in user mode by a variety of different methods. The exact meaning of each field depends on the version of Microsoft Windows version you are using.</P>
<H4>Displaying Critical Sections</H4>
<P>Critical sections can be displayed by the <b>!ntsdexts.locks</b> extension, the <b>!critsec</b> extension, the <b>!cs</b> extension, and the <b>dt (Display Type)</b> command.</P>
<P>The <a href="r31_exts_user_719ca52d-1eb4-4877-a644-4f6eff6f94dc.xml.htm"><b>!ntsdexts.locks</b></a> extension displays a list of critical sections associated with the current process. If the <b>-v</b> option is used, all critical sections are displayed. Here is an example:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:000&gt; <b>!locks</b><BR><BR>CritSec ntdll!FastPebLock+0 at 77FC49E0<BR>LockCount          0<BR>RecursionCount     1<BR>OwningThread       c78<BR>EntryCount         0<BR>ContentionCount    0<BR>*** Locked<BR><BR>....<BR>Scanned 37 critical sections<BR><BR></nobr></P>
<P>If you know the address of the critical section you wish to display, you can use the <a href="r31_exts_user_cfa27685-f767-4c83-a51f-0601d12fe5e5.xml.htm"><b>!critsec</b></a> extension. This displays the same collection of information as <b>!ntsdexts.locks</b>. For example:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:000&gt; <b>!critsec 77fc49e0</b><BR><BR>CritSec ntdll!FastPebLock+0 at 77FC49E0<BR>LockCount          0<BR>RecursionCount     1<BR>OwningThread       c78<BR>EntryCount         0<BR>ContentionCount    0<BR>*** Locked<BR><BR></nobr></P>
<P>The <a href="r24_exts_general_a_074a8417-eee7-42e0-a69c-636d4732950c.xml.htm"><b>!cs</b></a> extension is only available in Microsoft Windows XP and later versions of Windows. It can display a critical section based on its address, search an address range for critical sections, and even display the stack trace associated with each critical section. Some of these features require full Windows symbols to work properly. If Application Verifier is active, <b>!cs -t</b> can be used to display the critical section tree. See the <a href="r24_exts_general_a_074a8417-eee7-42e0-a69c-636d4732950c.xml.htm"><b>!cs</b></a> reference page for details and examples.</P>
<P>The information displayed by <b>!cs</b> is slightly different than that shown by <b>!ntsdexts.locks</b> and <b>!critsec</b>. For example:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:000&gt; <b>!cs 77fc49e0</b><BR>-----------------------------------------<BR>Critical section   = 0x77fc49e0 (ntdll!FastPebLock+0x0)<BR>DebugInfo          = 0x77fc3e00<BR>LOCKED<BR>LockCount          = 0x0<BR>OwningThread       = 0x00000c78<BR>RecursionCount     = 0x1<BR>LockSemaphore      = 0x0<BR>SpinCount          = 0x00000000<BR><BR></nobr></P>
<P>The <a href="r16_cmds_c_94727332-6184-4ced-897b-d358ca7c173d.xml.htm"><b>dt (Display Type)</b></a> command can be used to display the literal contents of the RTL_CRITICAL_SECTION structure. For example:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:000&gt; <b>dt RTL_CRITICAL_SECTION 77fc49e0</b><BR>   +0x000 DebugInfo        : 0x77fc3e00 <BR>   +0x004 LockCount        : 0<BR>   +0x008 RecursionCount   : 1<BR>   +0x00c OwningThread     : 0x00000c78 <BR>   +0x010 LockSemaphore    : (null) <BR>   +0x014 SpinCount        : 0<BR><BR></nobr></P>
<H4>Interpreting Critical Section Fields in Windows XP and Windows 2000</H4>
<P></P>
<P>The most important fields of the critical section structure are as follows:</P><B></B><UL type="disc">
<LI>In Microsoft Windows 2000, and Windows XP, the <b>LockCount</b> field indicates the number of times that any thread has called the <b>EnterCriticalSection</b> routine for this critical section, minus one. This field starts at -1 for an unlocked critical section. Each call of <b>EnterCriticalSection</b> increments this value; each call of <b>LeaveCriticalSection</b> decrements it. For example, if <b>LockCount</b> is 5, this critical section is locked, one thread has acquired it, and five additional threads are waiting for this lock.</LI>
<LI>The <b>RecursionCount</b> field indicates the number of times that the owning thread has called <b>EnterCriticalSection</b> for this critical section.</LI>
<LI>The <b>EntryCount</b> field indicates the number of times that a thread other than the owning thread has called <b>EnterCriticalSection</b> for this critical section.    </LI>
</UL>
<P></P>
<P>A newly initialized critical section looks like this:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:000&gt; <b>!critsec 433e60</b><BR>CritSec mymodule!cs+0 at 00433E60<BR>LockCount          NOT LOCKED <BR>RecursionCount     0<BR>OwningThread       0<BR>EntryCount         0<BR>ContentionCount    0<BR><BR></nobr></P>
<P>The debugger displays "NOT LOCKED" as the value for <b>LockCount</b>. The actual value of this field for an unlocked critical section is -1. You can verify this with the <b>dt (Display Type)</b> command:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:000&gt; <b>dt RTL_CRITICAL_SECTION 433e60</b><BR>   +0x000 DebugInfo        : 0x77fcec80<BR>   +0x004 LockCount        : -1<BR>   +0x008 RecursionCount   : 0<BR>   +0x00c OwningThread     : (null) <BR>   +0x010 LockSemaphore    : (null) <BR>   +0x014 SpinCount        : 0<BR><BR></nobr></P>
<P>When the first thread calls the <b>EnterCriticalSection</b> routine, the critical section's <b>LockCount</b>, <b>RecursionCount</b>, <b>EntryCount</b> and <b>ContentionCount</b> fields are all incremented by one, and <b>OwningThread</b> becomes the thread ID of the caller. <b>EntryCount</b> and <b>ContentionCount</b> are not incremented. For example:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:000&gt; <b>!critsec 433e60</b><BR>CritSec mymodule!cs+0 at 00433E60<BR>LockCount          0<BR>RecursionCount     1<BR>OwningThread       4d0<BR>EntryCount         0<BR>ContentionCount    0<BR><BR></nobr></P>
<P>At this point, four different things can happen. </P><B></B><OL type="1">
<LI>The owning thread calls <b>EnterCriticalSection</b> again. This will increment <b>LockCount</b> and <b>RecursionCount</b>. <b>EntryCount</b> is not incremented.<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:000&gt; <b>!critsec 433e60</b><BR>CritSec mymodule!cs+0 at 00433E60<BR>LockCount          1<BR>RecursionCount     2<BR>OwningThread       4d0<BR>EntryCount         0<BR>ContentionCount    0<BR><BR></nobr></P>
</LI>
<LI>A different thread calls <b>EnterCriticalSection</b>. This will increment <b>LockCount</b> and <b>EntryCount</b>. <b>RecursionCount</b> is not incremented.<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:000&gt; <b>!critsec 433e60</b><BR>CritSec mymodule!cs+0 at 00433E60<BR>LockCount          1<BR>RecursionCount     1<BR>OwningThread       4d0<BR>EntryCount         1<BR>ContentionCount    1<BR><BR></nobr></P>
</LI>
<LI>The owning thread calls <b>LeaveCriticalSection</b>. This will decrement <b>LockCount</b> (to -1) and <b>RecursionCount</b> (to 0), and will reset <b>OwningThread</b> to 0. <P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:000&gt; <b>!critsec 433e60</b><BR>CritSec mymodule!cs+0 at 00433E60<BR>LockCount          NOT LOCKED <BR>RecursionCount     0<BR>OwningThread       0<BR>EntryCount         0<BR>ContentionCount    0<BR><BR></nobr></P>
</LI>
<LI>Another thread calls <b>LeaveCriticalSection</b>. This produces the same results as the owning thread calling <b>LeaveCriticalSection</b> &#8212; it will decrement <b>LockCount</b> (to -1) and <b>RecursionCount</b> (to 0), and will reset <b>OwningThread</b> to 0.</LI>
</OL>
<P></P>
<P>When <i>any</i> thread calls <b>LeaveCriticalSection</b>, Windows decrements <b>LockCount</b> and <b>RecursionCount</b>. This feature has both good and bad aspects. It allows a device driver to enter a critical section on one thread and leave the critical section on another thread. However, it also makes it possible to accidentally call <b>LeaveCriticalSection</b> on the wrong thread, or to call <b>LeaveCriticalSection</b> too many times and cause <b>LockCount</b> to reach values lower than -1. This corrupts the critical section and causes all threads to wait indefinitely on the critical section.   </P>
<H4>Interpreting Critical Section Fields in Windows Server 2003 SP1 and Later</H4>
<P></P>
<P>In Microsoft Windows Server 2003 Service Pack 1 and later versions of Windows, the <b>LockCount</b> field is parsed as follows:</P><B></B><UL type="disc">
<LI>The lowest bit shows the lock status. If this bit is 0, the critical section is locked; if it is 1, the critical section is not locked.</LI>
<LI>The next bit shows whether a thread has been woken for this lock. If this bit is 0, then a thread has been woken for this lock; if it is 1, no thread has been woken.</LI>
<LI>The remaining bits are the ones-complement of the number of threads waiting for the lock.</LI>
</UL>
<P></P>
<P>As an example, suppose the <b>LockCount</b> is -22. The lowest bit can be determined in this way:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:009&gt; <b>? 0x1 &amp; (-0n22)</b><BR>Evaluate expression: 0 = 00000000<BR><BR></nobr></P>
<P>The next-lowest bit can be determined in this way:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:009&gt; <b>? (0x2 &amp; (-0n22)) &gt;&gt; 1</b><BR>Evaluate expression: 1 = 00000001<BR><BR></nobr></P>
<P>The ones-complement of the remaining bits can be determined in this way:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:009&gt; <b>? ((-1) - (-0n22)) &gt;&gt; 2</b><BR>Evaluate expression: 5 = 00000005<BR><BR></nobr></P>
<P>In this example, the first bit is 0 and therefore the critical section is locked. The second bit is 1, and so no thread has been woken for this lock. The complement of the remaining bits is 5, and so there are five threads waiting for this lock.</P>
<H4>Additional Information</H4>
<P>For information about how to debug critical section time outs, see <a href="t13_advanced_73588c25-c0b4-4628-bfab-1b39a09504f3.xml.htm">Critical Section Time Outs</a>. For general information about critical sections, see the Microsoft Windows SDK, the Windows Driver Kit (WDK), or <i>Microsoft Windows Internals</i> by Mark Russinovich and David Solomon. </P>
<P></P>
<DIV style="display:yes"></DIV>
<DIV CLASS="footer"><br><A href="dbglegal.htm">© 2009 Microsoft Corporation</A><br><A href="mailto:windbgfb@microsoft.com?subject=documentation feedback [Debugger]: Displaying a Critical Section RELEASE: (December 09, 2009)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AThe WDK team uses the feedback submitted to improve the WDK documentation. We do not use your e-mail address for any other purpose. We will remove your e-mail address from our system after the issue you are reporting has been resolved. While we are working to resolve this issue, we may send you an e-mail message to request more information about your feedback. After the issues have been addressed, we may send you an e-mail message to let you know that your feedback has been addressed.%0A%0AFor more information about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx.
              ">Send feedback on this topic</A><br>Debugging Tools for Windows<br>December 09, 2009<br></DIV>
</Body>
</HTML>
