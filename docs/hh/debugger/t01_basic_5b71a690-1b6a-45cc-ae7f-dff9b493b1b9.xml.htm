<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML DIR="LTR" xmlns:MSHelp="http://msdn.microsoft.com/MSHelp">
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<TITLE>Tracking Down a Processor Hog</TITLE>
<META NAME="ms.locale" content="en-us">
<META NAME="DESCRIPTION" CONTENT="Debugger, Debugger, Design Guide, Tracking Down a Processor Hog"><xml><MSHelp:Keyword Index="A" Term="t01_basic_5b71a690-1b6a-45cc-ae7f-dff9b493b1b9.xml"/>
<META NAME="MS-HKWD" CONTENT="processor hog">
<META NAME="MS-HKWD" CONTENT="hogging a processor">
<META NAME="MS-HKWD" CONTENT="starving applications"></xml><LINK REL="stylesheet" type="text/css" href="backsdk4.css"><SCRIPT src="langref.js"></SCRIPT><style>dd {margin-bottom:0em; margin-left:1.9em; }</style>
<style>.divclass {behavior:url(#default#savehistory);}</style>
<META NAME="save" CONTENT="history">
</HEAD>
<Body topmargin="0">
<DIV STYLE="display:none;"></DIV>
<DIV STYLE="display:none;"></DIV>
<TABLE CLASS="buttonbarshade" CELLSPACING="0" border="0"><TR><TD NOWRAP="true"> </TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING="0">
<TR ID="hdr">
<TD NOWRAP="true" CLASS="runninghead">Debugging Tools for Windows</TD>
</TR>
</TABLE>
<H1><A NAME="t01_basic_5b71a690-1b6a-45cc-ae7f-dff9b493b1b9.xml"></A>Tracking Down a Processor Hog</H1>
<P>If one application is consuming ("hogging") all the processor's attention, other processes will end up "starving" and unable to run.</P>
<P>Use the following procedure to correct a bug of this sort.</P><B>Debugging an application that is using all the CPU cycles </B><OL type="1">
<LI><i>Identify which application is causing this problem:</i> Use <b>Task Manager</b> or <b>Perfmon</b> to find which process is using 99% or 100% of the processor's cycles. This may tell you the offending thread as well.</LI>
<LI>Attach WinDbg, KD, or CDB to this process.</LI>
<LI><i>Identify which thread is causing the problem:</i> Break into the offending application. Use the <a href="r31_exts_user_ad164747-97c6-4751-88b5-5a21b13faedc.xml.htm"><b>!runaway 3</b></a> extension to take a "snapshot" of where all the CPU time is going. Use <a href="r16_cmds_c_5caa8c36-48bf-4892-aaea-ea0e70481ab4.xml.htm"><b>g (Go)</b></a> and wait a few seconds. Then break in and use <b>!runaway 3</b> again.<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:002&gt; <b>!runaway 3</b><BR> User Mode Time<BR> Thread    Time<BR> 4e0        0:12:16.0312<BR> 268        0:00:00.0000<BR> 22c        0:00:00.0000<BR> Kernel Mode Time<BR> Thread    Time<BR> 4e0        0:00:05.0312<BR> 268        0:00:00.0000<BR> 22c        0:00:00.0000<BR><BR>0:002&gt; <b>g</b><BR><BR>0:001&gt; <b>!runaway 3</b><BR> User Mode Time<BR> Thread    Time<BR> 4e0        0:12:37.0609<BR> 3d4        0:00:00.0000<BR> 22c        0:00:00.0000<BR> Kernel Mode Time<BR> Thread    Time<BR> 4e0        0:00:07.0421<BR> 3d4        0:00:00.0000<BR> 22c        0:00:00.0000<BR><BR></nobr></P>
<P>Compare the two sets of numbers and look for the thread whose user-mode time or kernel-mode time has increased the most. Because <b>!runaway</b> sorts by descending CPU time, the offending thread is usually the one at the top of the list. In this case, thread 0x4E0 is causing the problem.</P>
</LI>
<LI>Use the <a href="r15_cmds_a_e8b03a38-abea-4e4f-9429-a89f4638905b.xml.htm"><b>~ (Thread Status)</b></a> and <a href="r15_cmds_a_b10eaec6-a443-4cb3-8715-959477da74fa.xml.htm"><b>~s (Set Current Thread)</b></a> commands to make this the current thread:<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:001&gt; ~<BR>   0  Id: 3f4.3d4 Suspend: 1 Teb: 7ffde000 Unfrozen<BR>.  1  Id: 3f4.22c Suspend: 1 Teb: 7ffdd000 Unfrozen<BR>   <b>2</b>  Id: 3f4.<b>4e0</b> Suspend: 1 Teb: 7ffdc000 Unfrozen<BR><BR>0:001&gt; <b>~2s</b><BR><BR></nobr></P>
</LI>
<LI>Use <a href="r17_cmds_i_58e69e42-fcda-4972-9358-60ab7a6e1def.xml.htm"><b>kb (Display Stack Backtrace)</b></a> to obtain a stack trace of this thread:<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:002&gt; <b>kb</b><BR>FramePtr  RetAddr   Param1   Param2   Param3   Function Name<BR>0b4ffc74 <b> 77f6c600 </b> 000000c8.00000000 77fa5ad0 BuggyProgram!CreateMsgFile+0x1b<BR>0b4ffce4  01836060  0184f440 00000001 0b4ffe20 <b>BuggyProgram!OpenDestFileStream+0xb3</b><BR>0b4ffd20  01843eba  02b5b920 00000102 02b1e0e0 BuggyProgram!SaveMsgToDestFolder+0xb3<BR>0b4ffe20  01855924  0b4ffef0 00145970 0b4ffef0 BuggyProgram!DispatchToConn+0xa4<BR>0b4ffe5c  77e112e6  01843e16 0b4ffef0 0b4fff34 RPCRT4!DispatchToStubInC+0x34<BR>0b4ffeb0  77e11215  0b4ffef0 00000000 0b4fff34 RPCRT4!?DispatchToStubWorker@RPC_INTERFACE@@AAEJPAU_RPC_MESSAGE@@IPAJ@Z+0xb0<BR>0b4ffed0  77e1a3b1  0b4ffef0 00000000 0b4fff34 RPCRT4!?DispatchToStub@RPC_INTERFACE@@QAEJPAU_RPC_MESSAGE@Z+0x41<BR>0b4fff40  77e181e4  02b1e0b0 00000074 0b4fff90 RPCRT4!?ReceiveOriginalCall@OSF_SCONNECTION@Z+0x14b<BR>0b4fff60  77e1a5df  02b1e0b0 00000074 00149210 RPCRT4!?DispatchPacket@OSF_SCONNECTION@+0x91<BR>0b4fff90  77e1ac1c  77e15eaf 00149210 0b4fffec RPCRT4!?ReceiveLotsaCalls@OSF_ADDRESS@@QAEXXZ+0x76<BR><BR></nobr></P>
</LI>
<LI>Set a breakpoint on the return address of the currently-running function. In this case, the return address is shown on the first line as 0x77F6C600. The return address is equivalent to the function offset shown on the second line (<b>BuggyProgram!OpenDestFileStream+0xB3</b>). If no symbols are available for the application, the function name may not appear. Use the <a href="r16_cmds_c_5caa8c36-48bf-4892-aaea-ea0e70481ab4.xml.htm"><b>g (Go)</b></a> command to execute until this return address is reached, using either the symbolic or hexadecimal address:<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:002&gt; <b>g BuggyProgram!OpenDestFileStream+0xb3</b><BR><BR></nobr></P>
</LI>
<LI>If this breakpoint is hit, repeat the process. For example, suppose this breakpoint is hit. The following steps should be taken:<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:002&gt; <b>kb</b><BR>FramePtr  RetAddr   Param1   Param2   Param3   Function Name<BR>0b4ffce4  <b>01836060</b>  0184f440 00000001 0b4ffe20 BuggyProgram!OpenDestFileStream+0xb3<BR>0b4ffd20  01843eba  02b5b920 00000102 02b1e0e0 <b>BuggyProgram!SaveMsgToDestFolder+0xb3</b><BR>0b4ffe20  01855924  0b4ffef0 00145970 0b4ffef0 BuggyProgram!DispatchToConn+0xa4<BR>0b4ffe5c  77e112e6  01843e16 0b4ffef0 0b4fff34 RPCRT4!DispatchToStubInC+0x34<BR>0b4ffeb0  77e11215  0b4ffef0 00000000 0b4fff34 RPCRT4!?DispatchToStubWorker@RPC_INTERFACE@@AAEJPAU_RPC_MESSAGE@@IPAJ@Z+0xb0<BR>0b4ffed0  77e1a3b1  0b4ffef0 00000000 0b4fff34 RPCRT4!?DispatchToStub@RPC_INTERFACE@@QAEJPAU_RPC_MESSAGE@Z+0x41<BR>0b4fff40  77e181e4  02b1e0b0 00000074 0b4fff90 RPCRT4!?ReceiveOriginalCall@OSF_SCONNECTION@Z+0x14b<BR>0b4fff60  77e1a5df  02b1e0b0 00000074 00149210 RPCRT4!?DispatchPacket@OSF_SCONNECTION@+0x91<BR>0b4fff90  77e1ac1c  77e15eaf 00149210 0b4fffec RPCRT4!?ReceiveLotsaCalls@OSF_ADDRESS@@QAEXXZ+0x76<BR><BR>0:002&gt; <b>g BuggyProgram!SaveMsgToDestFolder+0xb3</b><BR><BR></nobr></P>
<P>If this is hit, continue with:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:002&gt; <b>kb</b><BR>FramePtr  RetAddr   Param1   Param2   Param3   Function Name<BR>0b4ffd20  <b>01843eba</b>  02b5b920 00000102 02b1e0e0 BuggyProgram!SaveMsgToDestFolder+0xb3<BR>0b4ffe20  01855924  0b4ffef0 00145970 0b4ffef0 <b>BuggyProgram!DispatchToConn+0xa4</b><BR>0b4ffe5c  77e112e6  01843e16 0b4ffef0 0b4fff34 RPCRT4!DispatchToStubInC+0x34<BR>0b4ffeb0  77e11215  0b4ffef0 00000000 0b4fff34 RPCRT4!?DispatchToStubWorker@RPC_INTERFACE@@AAEJPAU_RPC_MESSAGE@@IPAJ@Z+0xb0<BR>0b4ffed0  77e1a3b1  0b4ffef0 00000000 0b4fff34 RPCRT4!?DispatchToStub@RPC_INTERFACE@@QAEJPAU_RPC_MESSAGE@Z+0x41<BR>0b4fff40  77e181e4  02b1e0b0 00000074 0b4fff90 RPCRT4!?ReceiveOriginalCall@OSF_SCONNECTION@Z+0x14b<BR>0b4fff60  77e1a5df  02b1e0b0 00000074 00149210 RPCRT4!?DispatchPacket@OSF_SCONNECTION@+0x91<BR>0b4fff90  77e1ac1c  77e15eaf 00149210 0b4fffec RPCRT4!?ReceiveLotsaCalls@OSF_ADDRESS@@QAEXXZ+0x76<BR><BR>0:002&gt; <b>g BuggyProgram!DispatchToConn+0xa4</b><BR><BR></nobr></P>
</LI>
<LI>Finally you will find a breakpoint that is not hit. In this case, you should assume that the last <b>g</b> command set the target running and it did not break. This means that the <b>SaveMsgToDestFolder()</b> function will never return.</LI>
<LI>Break into the thread again and set a breakpoint on <b>BuggyProgram!SaveMsgToDestFolder+0xB3</b> with the <a href="r15_cmds_a_76c9b5bf-1e1a-4257-8bd4-4b00e2840523.xml.htm"><b>bp (Set Breakpoint)</b></a> command. Then use the <b>g</b> command repeatedly. If this breakpoint hits immediately, regardless of how many times you have executed the target, it is very likely that you have identified the offending function:<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:002&gt; <b>bp BuggyProgram!SaveMsgToDestFolder+0xb3</b><BR><BR>0:002&gt; <b>g </b><BR><BR>0:002&gt; <b>g </b><BR><BR></nobr></P>
</LI>
<LI>Use the <a href="r17_cmds_i_169c2b2f-7f47-4e0a-85a9-506f151f0a8f.xml.htm"><b>p (Step)</b></a> command to proceed through the function until you identify the place where the looping sequence of instructions are. You can then analyze the application's source code to identify the cause of the spinning thread. The cause will usually turn out to be a problem in the logic of a <b>while</b>, <b>do-while</b>, <b>goto</b>, or <b>for</b> loop.</LI>
</OL>
<P></P>
<H4>See Also</H4>
<P><a href="adplus_b7897f20-cd2a-4d8c-82a2-be81ef5773ff.xml.htm">Process Hangs or Consumes 100 Percent of CPU</a> </P>
<P></P>
<DIV style="display:yes"></DIV>
<DIV CLASS="footer"><br><A href="dbglegal.htm">© 2009 Microsoft Corporation</A><br><A href="mailto:windbgfb@microsoft.com?subject=documentation feedback [Debugger]: Tracking Down a Processor Hog RELEASE: (December 09, 2009)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AThe WDK team uses the feedback submitted to improve the WDK documentation. We do not use your e-mail address for any other purpose. We will remove your e-mail address from our system after the issue you are reporting has been resolved. While we are working to resolve this issue, we may send you an e-mail message to request more information about your feedback. After the issues have been addressed, we may send you an e-mail message to let you know that your feedback has been addressed.%0A%0AFor more information about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx.
              ">Send feedback on this topic</A><br>Debugging Tools for Windows<br>December 09, 2009<br></DIV>
</Body>
</HTML>
