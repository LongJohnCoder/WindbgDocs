<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML DIR="LTR" xmlns:MSHelp="http://msdn.microsoft.com/MSHelp">
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<TITLE>Bug Check 0x1E: KMODE_EXCEPTION_NOT_HANDLED</TITLE>
<META NAME="ms.locale" content="en-us">
<META NAME="DESCRIPTION" CONTENT="Debugger, Debugger, Design Guide, Bug Check 0x1E: KMODE_EXCEPTION_NOT_HANDLED"><xml><MSHelp:Keyword Index="A" Term="t04_bugs_00_b5e9832b-76df-4f7a-9b71-1d8fa1fd3363.xml"/>
<META NAME="MS-HKWD" CONTENT="Bug Check 0x1E: KMODE_EXCEPTION_NOT_HANDLED">
<META NAME="MS-HKWD" CONTENT="KMODE_EXCEPTION_NOT_HANDLED"></xml><LINK REL="stylesheet" type="text/css" href="backsdk4.css"><SCRIPT src="langref.js"></SCRIPT><style>dd {margin-bottom:0em; margin-left:1.9em; }</style>
<style>.divclass {behavior:url(#default#savehistory);}</style>
<META NAME="save" CONTENT="history">
</HEAD>
<Body topmargin="0">
<DIV STYLE="display:none;"></DIV>
<DIV STYLE="display:none;"></DIV>
<TABLE CLASS="buttonbarshade" CELLSPACING="0" border="0"><TR><TD NOWRAP="true"> </TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING="0">
<TR ID="hdr">
<TD NOWRAP="true" CLASS="runninghead">Debugging Tools for Windows</TD>
</TR>
</TABLE>
<H1><A NAME="t04_bugs_00_b5e9832b-76df-4f7a-9b71-1d8fa1fd3363.xml"></A>Bug Check 0x1E: KMODE_EXCEPTION_NOT_HANDLED</H1>
<P>The KMODE_EXCEPTION_NOT_HANDLED bug check has a value of 0x0000001E. This indicates that a kernel-mode program generated an exception which the error handler did not catch.</P>
<H4>Parameters</H4>
<P>The following parameters are displayed on the blue screen.</P><B></B><table>
<TR valign="top">
<TH Width="">Parameter</TH>
<TH Width="">Description</TH>
</TR>
<TR valign="top">
<TD Width="">1</TD>
<TD Width="">The exception code that was not handled</TD>
</TR>
<TR valign="top">
<TD Width="">2</TD>
<TD Width="">The address at which the exception occurred</TD>
</TR>
<TR valign="top">
<TD Width="">3</TD>
<TD Width="">Parameter 0 of the exception</TD>
</TR>
<TR valign="top">
<TD Width="">4</TD>
<TD Width="">Parameter 1 of the exception</TD>
</TR>
</table>
<P></P>
<H4>Cause</H4>
<P>This is a very common bug check. To interpret it, you must identify which exception was generated.</P>
<P>Common exception codes include:</P><B></B><UL type="disc">
<LI>0x80000002: STATUS_DATATYPE_MISALIGNMENT<P>An unaligned data reference was encountered.</P>
</LI>
<LI>0x80000003: STATUS_BREAKPOINT<P>A breakpoint or ASSERT was encountered when no kernel debugger was attached to the system.   </P>
</LI>
<LI>0xC0000005: STATUS_ACCESS_VIOLATION<P>A memory access violation occurred. (Parameter 4 of the bug check is the address that the driver attempted to access.)</P>
</LI>
</UL>
<P></P>
<P>For a complete list of exception codes, see the <i>ntstatus.h </i>file located in the <i>inc</i> directory of the Windows Driver Kit.</P>
<H4>Resolving the Problem</H4>
<P><i>If you are not equipped to debug this problem</i>, you should use some basic troubleshooting techniques. If a driver is identified in the bug check message, disable the driver or check with the manufacturer for driver updates. Try changing video adapters. Check with your hardware vendor for any BIOS updates. Disable BIOS memory options such as caching or shadowing.</P>
<P><i>If you plan to debug this problem</i>, you may find it difficult to obtain a stack trace. Parameter 2 (the exception address) should pinpoint the driver or function that caused this problem.</P>
<P>If exception code 0x80000003 occurs, this indicates that a hard-coded breakpoint or assertion was hit, but the system was started with the <b>/NODEBUG</b> switch. This problem should rarely occur. If it occurs repeatedly, make sure a kernel debugger is connected and the system is started with the <b>/DEBUG</b> switch.</P>
<P>If exception code 0x80000002 occurs, the trap frame will supply additional information.</P>
<P>If the specific cause of the exception is unknown, the following should be considered:</P>
<P><i>Hardware incompatibility. </i>First, make sure that any new hardware installed is listed in the Microsoft Windows Marketplace Tested Products List.</P>
<P><i>Faulty device driver or system service. </i>In addition, a faulty device driver or system service might be responsible for this error. Hardware issues, such as BIOS incompatibilities, memory conflicts, and IRQ conflicts can also generate this error.</P>
<P>If a driver is listed by name within the bug check message, disable or remove that driver. Disable or remove any drivers or services that were recently added. If the error occurs during the startup sequence and the system partition is formatted with NTFS file system, you might be able to use Safe Mode to rename or delete the faulty driver. If the driver is used as part of the system startup process in Safe Mode, you need to start the computer by using the Recovery Console to access the file. </P>
<P>If the problem is associated with <i>Win32k.sys</i>, the source of the error might be a third-party remote control program. If such software is installed, the service can be removed by starting the system using the Recovery Console and deleting the offending system service file.</P>
<P>Check the System Log in <b>Event Viewer</b> for additional error messages that might help pinpoint the device or driver that is causing bug check 0x1E. Disabling memory caching of the BIOS might also resolve the error. You should also run hardware diagnostics, especially the memory scanner, supplied by the system manufacturer. For details on these procedures, see the owner's manual for your computer. </P>
<P>The error that generates this message can occur after the first restart during Windows Setup, or after Setup is finished. A possible cause of the error is a system BIOS incompatibility. BIOS problems can be resolved by upgrading the system BIOS version.</P>
<P></P><B>To get a stack trace if the normal stack tracing procedures fail</B><OL type="1">
<LI>Use the <a href="r17_cmds_i_58e69e42-fcda-4972-9358-60ab7a6e1def.xml.htm"><b>kb (Display Stack Backtrace)</b></a> command to display parameters in the stack trace. Look for the call to <b>NT!PspUnhandledExceptionInSystemThread</b>. (If this function is not listed, see the note below.)</LI>
<LI>The first parameter to <b>NT!PspUnhandledExceptionInSystemThread</b> is a pointer to a structure, which contains pointers to an <b>except</b> statement:<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>typedef struct _EXCEPTION_POINTERS {<BR>    PEXCEPTION_RECORD ExceptionRecord;<BR>    PCONTEXT ContextRecord;<BR>    } EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;<BR><BR>ULONG PspUnhandledExceptionInSystemThread(<BR>    IN PEXCEPTION_POINTERS ExceptionPointers<BR>    )<BR><BR></nobr></P>
<P>Use the  <a href="r16_cmds_c_eddd6afa-a4e9-49c7-8752-7005aca29a84.xml.htm"><b>dd (Display Memory)</b></a> command on that address to display the necessary data. </P>
</LI>
<LI>The first retrieved value is an exception record and the second is a context record. Use the <a href="r20_metacmds_e_798da199-336f-4f7c-a8a2-e512d74ca30f.xml.htm"><b>.exr (Display Exception Record)</b></a> command and the <a href="r19_metacmds_a_a174b7ab-942b-4703-85e7-a391e4b5dfdf.xml.htm"><b>.cxr (Display Context Record)</b></a> command with these two values as their arguments, respectively.</LI>
<LI>After the <b>.cxr</b> command executes, use the <b>kb</b> command to display a stack trace that is based on the context record information. This stack trace indicates the calling stack where the unhandled exception occurred.</LI>
</OL>
<P></P>
<P class="note"><b>Note</b>  This procedure assumes that you can locate <b>NT!PspUnhandledExceptionInSystemThread</b>. However, in some cases (such as an access violation crash) you will not be able to do this. In that case, look for <b>ntoskrnl!KiDispatchException</b>. The third parameter passed to this function is a trap frame address. Use the <a href="r22_metacmds_s_1c1078f3-5311-4695-be7d-0e10e76750d7.xml.htm"><b>.trap (Display Trap Frame)</b></a> command with this address to set the <a href="r07_use_operation_bdab0129-28de-4392-a221-53a08bcc468e.xml.htm#ca0c8db7-0f2b-4b1a-973c-304275053ffb">Register Context</a> to the proper value. You can then perform stack traces and issue other commands.   </P>
<P>Here is an example of bug check 0x1E on an x86 processor:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>kd&gt; <b>.bugcheck         </b>        get the bug check data<BR>Bugcheck code 0000001e<BR>Arguments c0000005 8013cd0a 00000000 0362cffff<BR><BR>kd&gt;<b> kb</b>                        start with a stack trace <BR>FramePtr  RetAddr   Param1   Param2   Param3   Function Name <BR>8013ed5c  801263ba  00000000 00000000 fe40cb00 NT!_DbgBreakPoint <BR>8013eecc  8013313c  0000001e c0000005 8013cd0a NT!_KeBugCheckEx+0x194<BR>fe40cad0  8013318e  fe40caf8 801359ff fe40cb00 NT!PspUnhandledExceptionInSystemThread+0x18<BR>fe40cad8  801359ff  fe40cb00 00000000 fe40cb00 NT!PspSystemThreadStartup+0x4a<BR>fe40cf7c  8013cb8e  fe43a44c ff6ce388 00000000 NT!_except_handler3+0x47<BR>00000000  00000000  00000000 00000000 00000000 NT!KiThreadStartup+0xe<BR><BR>kd&gt; <b>dd fe40caf8 L2 </b>           dump EXCEPTION_POINTERS structure<BR>0xFE40CAF8  fe40cd88 fe40cbc4                   ..@...@.<BR><BR>kd&gt;<b> .exr fe40cd88  </b>           first DWORD is the exception record<BR>Exception Record @ FE40CD88:<BR>   ExceptionCode: c0000005<BR>  ExceptionFlags: 00000000<BR>  Chained Record: 00000000<BR>ExceptionAddress: 8013cd0a<BR>NumberParameters: 00000002<BR>   Parameter[0]: 00000000<BR>   Parameter[1]: 0362cfff<BR><BR>kd&gt;<b> .cxr fe40cbc4  </b>           second DWORD is the context record<BR>CtxFlags: 00010017<BR>eax=00087000 ebx=00000000 ecx=03ff0000 edx=ff63d000 esi=0362cfff edi=036b3fff<BR>eip=8013cd0a esp=fe40ce50 ebp=fe40cef8 iopl=0         nv dn ei pl nz ac po cy<BR>vip=0    vif=0<BR>cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00010617<BR>0x8013cd0a  f3a4             rep movsb<BR><BR>kd&gt;<b> kb     </b>                   kb gives stack for context record<BR>ChildEBP RetAddr  Args to Child<BR>fe40ce54 80402e09 ff6c4000 ff63d000 03ff0000 NT!_RtlMoveMemory@12+0x3e<BR>fe40ce68 80403c18 ffbc0c28 ff6ce008 ff6c4000 HAL!_HalpCopyBufferMap@20+0x49<BR>fe40ce9c fe43b1e4 ff6cef90 ffbc0c28 ff6ce009 HAL!_IoFlushAdapterBuffers@24+0x148<BR>fe40ceb8 fe4385b4 ff6ce388 6cd00800 ffbc0c28 QIC117!_kdi_FlushDMABuffers@20+0x28<BR>fe40cef8 fe439894 ff6cd008 ffb6c820 fe40cf4c QIC117!_cqd_CmdReadWrite@8+0x26e<BR>fe40cf18 fe437d92 ff6cd008 ffb6c820 ff6e4e50 QIC117!_cqd_DispatchFRB@8+0x210<BR>fe40cf30 fe43a4f5 ff6cd008 ffb6c820 00000000 QIC117!_cqd_ProcessFRB@8+0x134<BR>fe40cf4c 80133184 ff6ce388 00000000 00000000 QIC117!_kdi_ThreadRun@4+0xa9<BR>fe40cf7c 8013cb8e fe43a44c ff6ce388 00000000 NT!_PspSystemThreadStartup@8+0x40<BR><BR></nobr></P>
<P></P>
<P></P>
<DIV style="display:yes"></DIV>
<DIV CLASS="footer"><br><A href="dbglegal.htm">© 2009 Microsoft Corporation</A><br><A href="mailto:windbgfb@microsoft.com?subject=documentation feedback [Debugger]: Bug Check 0x1E: KMODE_EXCEPTION_NOT_HANDLED RELEASE: (December 09, 2009)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AThe WDK team uses the feedback submitted to improve the WDK documentation. We do not use your e-mail address for any other purpose. We will remove your e-mail address from our system after the issue you are reporting has been resolved. While we are working to resolve this issue, we may send you an e-mail message to request more information about your feedback. After the issues have been addressed, we may send you an e-mail message to let you know that your feedback has been addressed.%0A%0AFor more information about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx.
              ">Send feedback on this topic</A><br>Debugging Tools for Windows<br>December 09, 2009<br></DIV>
</Body>
</HTML>
