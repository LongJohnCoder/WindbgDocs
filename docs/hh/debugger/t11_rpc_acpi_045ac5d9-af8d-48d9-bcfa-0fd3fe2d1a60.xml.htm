<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML DIR="LTR" xmlns:MSHelp="http://msdn.microsoft.com/MSHelp">
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<TITLE>Identifying the Caller From the Server Thread</TITLE>
<META NAME="ms.locale" content="en-us">
<META NAME="DESCRIPTION" CONTENT="Debugger, Debugger, Design Guide, Identifying the Caller From the Server Thread"><xml><MSHelp:Keyword Index="A" Term="t11_rpc_acpi_045ac5d9-af8d-48d9-bcfa-0fd3fe2d1a60.xml"/>
<META NAME="MS-HKWD" CONTENT="RPC debugging, identifying the caller"></xml><LINK REL="stylesheet" type="text/css" href="backsdk4.css"><SCRIPT src="langref.js"></SCRIPT><style>dd {margin-bottom:0em; margin-left:1.9em; }</style>
<style>.divclass {behavior:url(#default#savehistory);}</style>
<META NAME="save" CONTENT="history">
</HEAD>
<Body topmargin="0">
<DIV STYLE="display:none;"></DIV>
<DIV STYLE="display:none;"></DIV>
<TABLE CLASS="buttonbarshade" CELLSPACING="0" border="0"><TR><TD NOWRAP="true"> </TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING="0">
<TR ID="hdr">
<TD NOWRAP="true" CLASS="runninghead">Debugging Tools for Windows</TD>
</TR>
</TABLE>
<H1><A NAME="t11_rpc_acpi_045ac5d9-af8d-48d9-bcfa-0fd3fe2d1a60.xml"></A>Identifying the Caller From the Server Thread</H1>
<P>It is possible to determine what made a given RPC call, even if the only information you have is the server thread that serviced the call.</P>
<P>This can be very useful &#8212; for example, to find out who passed invalid parameters to an RPC call.</P>
<P>Depending on which protocol sequence is used by this particular call, you can get varying degrees of detail. Some protocols (such as NetBios) do not have this information at all.</P><B>Identifying the caller from the server thread</B><OL type="1">
<LI>Start a user-mode debugger with the server thread as the target.</LI>
<LI>Get the process ID by using the <a href="r15_cmds_a_94a10932-6816-4202-8307-985cd46649d1.xml.htm"><b>| (Process Status)</b></a> command:<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:001&gt; <b>|</b><BR>  0     id: 3d4 name: rtsvr.exe<BR><BR></nobr></P>
</LI>
<LI>Get the active calls in this process by using the <a href="r32_exts_lg_nd_rpc_9744e87c-777a-4ff6-8d81-9e7fcf64e69c.xml.htm"><b>!rpcexts.getcallinfo</b></a> extension. (See the reference page for an explanation of the syntax.) You need to supply the process ID of 0x3D4:<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:001&gt; <b>!rpcexts.getcallinfo 0 0 FFFF 3d4</b><BR>Searching for call info ...<BR>PID  CELL ID   ST PNO IFSTART  THRDCELL  CALLFLAG CALLID   LASTTIME CONN/CLN<BR>----------------------------------------------------------------------------<BR>03d4 0000.0004 02 000 19bb5061 0000.0002 00000001 00000001 00a1aced 0000.0003<BR><BR></nobr></P>
<P>Look for calls with status 02 or 01 (dispatched or active). In this example, the process only has one call. If there were more, you would have to use the <a href="r32_exts_lg_nd_rpc_2e6c7d8d-6002-4083-a3e2-92ba9931c94b.xml.htm"><b>!rpcexts.getdbgcell</b></a> extension with the cell number in the THRDCELL column. This would allow you to examine the thread IDs so you could determine which call you were interested in.</P>
</LI>
<LI>After you know which call you are interested in, look at the cell number in the CONN/CLN column. This is the cell ID of the connection object. In this case, the cell number is 0000.0003. Pass this cell number and the process ID to <b>!rpcexts.getdbgcell</b>:<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0:001&gt; <b>!rpcexts.getdbgcell 3d4 0.3</b><BR>Getting cell info ...<BR>Connection<BR>Connection flags: Exclusive<BR>Authentication Level: Default<BR>Authentication Service: None<BR>Last Transmit Fragment Size: 24 (0x6F56D)<BR>Endpoint for the connection: 0x0.1<BR>Last send time (in seconds since boot):10595.565 (0x2963.235)<BR>Last receive time (in seconds since boot):10595.565 (0x2963.235)<BR>Getting endpoint info ...<BR>Process object for caller is 0xFF9DF5F0<BR><BR></nobr></P>
</LI>
</OL>
<P></P>
<P>This extension will display all the information available about the client of this connection. The amount of actual information will vary, depending on the transport being used.</P>
<P>In this example, local named pipes are being used as the transport and the process object address of the caller is displayed. If you attach a kernel debugger (or start a local kernel debugger), you can use the <a href="r28_exts_kernel_n_e9446ce7-8219-425d-b7d2-48404ce64e3e.xml.htm"><b>!process</b></a> extension to interpret this process address.</P>
<P>If LRPC is used as the transport, the process ID and thread ID of the caller will be displayed.</P>
<P>If TCP is used as the transport, the IP address of the caller will be displayed.</P>
<P>If remote named pipes are used as the transport, no information will be available.</P>
<P class="note"><b>Note</b>  The previous example shows how to find the client thread if you know the server thread. For an example of the <i>reverse</i> technique, see <a href="t11_rpc_acpi_929368a2-bac1-44be-b7df-8642cae1ed9d.xml.htm">Analyzing a Stuck Call Problem</a>.</P>
<P></P>
<DIV style="display:yes"></DIV>
<DIV CLASS="footer"><br><A href="dbglegal.htm">© 2009 Microsoft Corporation</A><br><A href="mailto:windbgfb@microsoft.com?subject=documentation feedback [Debugger]: Identifying the Caller From the Server Thread RELEASE: (December 09, 2009)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AThe WDK team uses the feedback submitted to improve the WDK documentation. We do not use your e-mail address for any other purpose. We will remove your e-mail address from our system after the issue you are reporting has been resolved. While we are working to resolve this issue, we may send you an e-mail message to request more information about your feedback. After the issues have been addressed, we may send you an e-mail message to let you know that your feedback has been addressed.%0A%0AFor more information about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx.
              ">Send feedback on this topic</A><br>Debugging Tools for Windows<br>December 09, 2009<br></DIV>
</Body>
</HTML>
