<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML DIR="LTR" xmlns:MSHelp="http://msdn.microsoft.com/MSHelp">
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<TITLE>Checking for Resource Conflicts</TITLE>
<META NAME="ms.locale" content="en-us">
<META NAME="DESCRIPTION" CONTENT="Debugger, Debugger, Design Guide, Checking for Resource Conflicts"><xml><MSHelp:Keyword Index="A" Term="t12_drivers_6c4fd74a-4aa3-4225-ad41-e83f4dd319ce.xml"/>
<META NAME="MS-HKWD" CONTENT="Plug and Play (PnP), resource conflicts">
<META NAME="MS-HKWD" CONTENT="resource conflicts"></xml><LINK REL="stylesheet" type="text/css" href="backsdk4.css"><SCRIPT src="langref.js"></SCRIPT><style>dd {margin-bottom:0em; margin-left:1.9em; }</style>
<style>.divclass {behavior:url(#default#savehistory);}</style>
<META NAME="save" CONTENT="history">
</HEAD>
<Body topmargin="0">
<DIV STYLE="display:none;"></DIV>
<DIV STYLE="display:none;"></DIV>
<TABLE CLASS="buttonbarshade" CELLSPACING="0" border="0"><TR><TD NOWRAP="true"> </TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING="0">
<TR ID="hdr">
<TD NOWRAP="true" CLASS="runninghead">Debugging Tools for Windows</TD>
</TR>
</TABLE>
<H1><A NAME="t12_drivers_6c4fd74a-4aa3-4225-ad41-e83f4dd319ce.xml"></A>Checking for Resource Conflicts</H1>
<P>This section discusses techniques that can be used to detect resource conflicts.</P>
<P>The first technique involves dumping the arbiter data. The following example examines the arbiter data for the I/O ranges:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>kd&gt; <b>!arbiter 1</b><BR><BR>DEVNODE ff0daf48<BR>  Port Arbiter "RootPort" at 8045b920<BR>    Allocated ranges:<BR>      10 - 1f S         Owner ff0d6b30<BR>      22 - 3f S         Owner ff0d6b30<BR>      44 - 47 S         Owner ff0d6b30<BR>      4c - 6f S         Owner ff0d6b30<BR>      72 - 7f S         Owner ff0d6b30<BR>      90 - 91 S         Owner ff0d6b30<BR>      93 - 9f S         Owner ff0d6b30<BR>      a2 - bf S         Owner ff0d6b30<BR>      d0 - ef S         Owner ff0d6b30<BR>      100 - 2f7 S       Owner ff0d6b30<BR>      300 - cf7 S       Owner ff0d6b30<BR>      d00 - ffff S      Owner ff0d6b30<BR>    Possible allocation:<BR>      &lt; none &gt;<BR><BR>    DEVNODE ff0d2e28 (PCI_HAL\PNP0A03\0)<BR>      Port Arbiter "PCI I/O Port (b=00)" at e122c2c8<BR>        Allocated ranges:<BR>          0 - f         Owner 00000000<BR>          20 - 21       Owner 00000000<BR>          40 - 43       Owner 00000000<BR>          48 - 4b       Owner 00000000<BR>          60 - 60       Owner ff0d4030<BR>          64 - 64       Owner ff0d4030<BR>          70 - 71       Owner 00000000<BR>          80 - 8f       Owner 00000000<BR>          92 - 92       Owner 00000000<BR>          a0 - a1       Owner 00000000<BR>          c0 - cf       Owner 00000000<BR>          f0 - ff       Owner 00000000<BR>          170 - 177     Owner ff0cf030<BR>          1ce - 1cf S   Owner ff040040<BR>          2f8 - 2ff     Owner 00000000<BR>          376 - 376     Owner ff0cf030<BR>          378 - 37f     Owner ff0d4e70<BR>          3b0 - 3bb S   Owner ff040040<BR>          <b>3c0 - 3cf</b> S   Owner <b>ff0bb900</b><BR>          3c0 - 3df S   Owner ff040040<BR>          3d4 - 3db S   Owner ff0bb900<BR>          3de - 3df S   Owner ff0bb900<BR>          <b>3ec - 3ef</b>     Owner <b>ff0d0b50 </b><i>(This device conflicts with another device, see below)</i><BR>          3f2 - 3f5     Owner ff0d4770<BR>          3f7 - 3f7 S   Owner ff0d4770<BR>          3f8 - 3ff     Owner ff0d4af0<BR>          778 - 77b     Owner ff0d4e70<BR>          cf8 - cff     Owner 00000000<BR>          1000 - 10ff           Owner ff0d1030<BR>          1400 - 140f           Owner ff0d1d30<BR>          1410 - 141f           Owner ff0d1890<BR>          10000 - ffffffffffffffff      Owner 00000000<BR>        Possible allocation:<BR>          &lt; none &gt;<BR><BR></nobr></P>
<P>Note that there are two arbiters: one located in the root of the device tree, and one in PCI_HAL. Also note that the PCI arbiter claims and preallocates ranges for the devices it arbitrates (0xD000-0xFFFF, which is later suballocated by the PCI arbiter for its devices). The Owner field indicates the device object that owns the range. A value of zero for Owner indicates that the range is not on the bus. In the case of a PCI bridge, for example, all the ranges it does not pass will be assigned to NULL.</P>
<P>In the following example, the PCI bridge passes I/O 0xD000-0xDFFFF so its arbiter will contain the following two ranges:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>0-CFFFF            Owner 00000000<BR>E0000-FFFFFFFFFFFFFFFF   Owner 00000000<BR><BR></nobr></P>
<P>The FFFFFFFFFFFFFFFF is because all arbitrated resources are treated as 64-bit ranges.</P>
<P><i>Examples:</i></P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>kd&gt; <b>!devobj ff0bb900</b><BR><BR>Device object (ff0bb900) is for:<BR> Video0 \Driver\mga_mil DriverObject ff0bbc10<BR>Current Irp 00000000 RefCount 1 Type 00000023 Flags 0000204c<BR>DevExt ff0bb9b8 DevNode ff0bb808<BR>Device queue is not busy.<BR>kd&gt; <b>!devnode ff0bb808</b><BR><BR>DevNode 0xff0bb808 for PDO 0xff0bb900 at level 0xffffffff<BR>  Parent 0xff0daf48   Sibling 0000000000   Child 0000000000<BR>  InterfaceType 0xffffffff  Bus Number 0xffffffff<BR>  TargetDeviceNotify List - f 0xff0bb86c  b 0xff0bb86c<BR>  Flags (0x00000400)  DNF_RESOURCE_REPORTED<BR>kd&gt; !devnode ff0bb808 6<BR><BR>DevNode 0xff0bb808 for PDO 0xff0bb900 at level 0xffffffff<BR>  Parent 0xff0daf48   Sibling 0000000000   Child 0000000000<BR>  InterfaceType 0xffffffff  Bus Number 0xffffffff<BR>  TargetDeviceNotify List - f 0xff0bb86c  b 0xff0bb86c<BR>  Flags (0x00000400)  DNF_RESOURCE_REPORTED<BR>  CmResourceList at 0xe12474e8  Version 0.0  Interface 0x5  Bus #0<BR>    Entry 0 - Port (0x1) Shared (0x3)<BR>      Flags (0x01) - PORT_MEMORY PORT_IO<BR>      Range starts at 0x3c0 for 0x10 bytes<BR>    Entry 1 - Port (0x1) Shared (0x3)<BR>      Flags (0x01) - PORT_MEMORY PORT_IO<BR>      Range starts at 0x3d4 for 0x8 bytes<BR>    Entry 2 - Port (0x1) Shared (0x3)<BR>      Flags (0x01) - PORT_MEMORY PORT_IO<BR>      Range starts at 0x3de for 0x2 bytes<BR>    Entry 3 - Memory (0x3) Device Exclusive (0x1)<BR>      Flags (0000) - READ_WRITE<BR>      Range starts at 0x0000000040000000 for 0x4000 bytes<BR>    Entry 4 - Memory (0x3) Device Exclusive (0x1)<BR>      Flags (0000) - READ_WRITE<BR>      Range starts at 0x0000000040800000 for 0x800000 bytes<BR><BR></nobr></P>
<P>As shown in the example, this operation retrieved the legacy video card that owns the range 3c0-3cf. The same device object is listed near the other ranges it owns (3de-3df and 3d4-3dc). Using the same tracking technique, the range of 3f8-3ff is determined to be that used by the serial port.</P>
<P>A similar technique is required to translate the interrupts:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>kd&gt; <b>!arbiter 4</b><BR><BR>DEVNODE ff0daf48<BR>  Interrupt Arbiter "RootIRQ" at 8045bae0<BR>    Allocated ranges:<BR>      31 - 31           Owner ff0d4030<BR>      34 - 34 S         Owner ff0d4af0<BR>      36 - 36           Owner ff0d4770<BR>      3b - 3b S         Owner ff0d1030<BR>      3b - 3b S         Owner ff0d1d30<BR>      3c - 3c           Owner ff0d3c70<BR>      <b>3f - 3f </b>          Owner <b>ff0cf030</b><BR>    Possible allocation:<BR>      &lt; none &gt;<BR><BR></nobr></P>
<P>Note that there is a single arbiter for interrupts: the root arbiter. </P>
<P>For example, translate the interrupt 3F to an IRQ. First dump the device object, then the devnode:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>kd&gt; <b>!devobj ff0cf030</b><BR><BR>Device object (ff0cf030) is for:<BR> IdeFdoff0d0398Channel1 \Driver\IntelIde DriverObject ff0d0530<BR>Current Irp 00000000 RefCount 0 Type 00000004 Flags 00001040AttachedDev ff0cd030<BR><BR>DevExt ff0cf0e8 DevNode <b>ff0cfe88</b><BR>Device queue is not busy.<BR>kd&gt;<b> !devnode ff0cfe88 6</b><BR><BR>DevNode 0xff0cfe88 for PDO 0xff0cf030 at level 0x3<BR>  Parent 0xff0d1348   Sibling 0000000000   Child 0xff0c84a8<BR>  InterfaceType 0xffffffff  Bus Number 0xfffffff0<BR>  InstancePath is "PCIIDE\IDEChannel\1&amp;1"<BR>  ServiceName is "atapi"<BR>  TargetDeviceNotify List - f 0xff0cfeec  b 0xff0cfeec<BR>  Flags (0x6000120b)  DNF_PROCESSED, DNF_STARTED,<BR>                      DNF_ENUMERATED, DNF_RESOURCE_ASSIGNED,<BR>                      DNF_ADDED, DNF_HAS_BOOT_CONFIG<BR>                      Unknown flags 0x40000000<BR>  CmResourceList at 0xe12321c8  Version 0.0  Interface 0x1  Bus #0<BR>    Entry 0 - Port (0x1) Device Exclusive (0x1)<BR>      Flags (0x01) - PORT_MEMORY PORT_IO<BR>      Range starts at 0x170 for 0x8 bytes<BR>    Entry 1 - Port (0x1) Device Exclusive (0x1)<BR>      Flags (0x01) - PORT_MEMORY PORT_IO<BR>      Range starts at 0x376 for 0x1 bytes<BR><b>    Entry 2 - Interrupt (0x2) Device Exclusive (0x1)</b><BR>      Flags (0x01) - LATCHED<BR><b>      Level 0xf, Vector 0xf, Affinity 0xffffffff</b><BR><BR>  IoResList at 0xe12363c8 : Interface 0x1  Bus 0  Slot 0<BR>  Reserved Values = {0x0002e0d0, 0x00920092, 0xe1235508}<BR>    Alternative 0 (Version 1.1)<BR>      Preferred Descriptor 0 - NonArbitrated/ConfigData (0x80) Shared (0x3)<BR>        Flags (0000) -<BR>        Data:              : 0x1 0x61004d 0x680063<BR>      Preferred Descriptor 1 - Port (0x1) Device Exclusive (0x1)<BR>        Flags (0x01) - PORT_IO<BR>        0x000008 byte range with alignment 0x000001<BR>        170 - 0x177<BR>      Preferred Descriptor 2 - Port (0x1) Device Exclusive (0x1)<BR>        Flags (0x01) - PORT_IO<BR>        0x000001 byte range with alignment 0x000001<BR>        376 - 0x376<BR>      Preferred Descriptor 3 - Interrupt (0x2) Device Exclusive (0x1)<BR>        Flags (0x01) - LATCHED<BR>        0xf - 0xf<BR>    Alternative 1 (Version 1.1)<BR>      Preferred Descriptor 0 - Port (0x1) Device Exclusive (0x1)<BR>        Flags (0x01) - PORT_IO<BR>        0x000008 byte range with alignment 0x000001<BR>        170 - 0x177<BR>      Preferred Descriptor 1 - Port (0x1) Device Exclusive (0x1)<BR>        Flags (0x01) - PORT_IO<BR>        0x000001 byte range with alignment 0x000001<BR>        376 - 0x376<BR>      Preferred Descriptor 2 - Interrupt (0x2) Device Exclusive (0x1)<BR>        Flags (0x01) - LATCHED<BR>        0xf - 0xf<BR><BR></nobr></P>
<P>For example, try to determine if there is a resource conflict that caused this device not to start, starting with a <b>devnode</b>:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>kd&gt; <b>!devnode 0xff0d4bc8 6</b><BR><BR>DevNode 0xff0d4bc8 for PDO 0xff0d4cb0 at level 0<BR>  Parent 0xff0daf48   Sibling 0xff0d4a08   Child 0000000000<BR>  InterfaceType 0xffffffff  Bus Number 0xffffffff<BR>  InstancePath is "Root\*PNP0501\1_0_17_2_0_0"<BR>  ServiceName is "Serial"<BR>  TargetDeviceNotify List - f 0xff0d4c2c  b 0xff0d4c2c<BR>  Flags (0x60001129)  DNF_PROCESSED, DNF_ENUMERATED,<BR>                      DNF_MADEUP, <b>DNF_INSUFFICIENT_RESOURCES</b>,<BR>                      DNF_ADDED, DNF_HAS_BOOT_CONFIG<BR>                      Unknown flags 0x40000000<BR><BR>  IoResList at 0xe1251e28 : Interface 0x1  Bus 0  Slot 0<BR>  Reserved Values = {0x0043005c, 0x006e006f, 0x00720074}<BR>    Alternative 0 (Version 1.1)<BR>      Preferred Descriptor 0 - NonArbitrated/ConfigData (0x80) Undetermined Shar<BR>ing (0)<BR>        Flags (0000) -<BR>        Data:              : 0xc000 0x0 0x0<BR>      Preferred Descriptor 1 - Port (0x1) Undetermined Sharing (0)<BR>        Flags (0x05) - PORT_IO 10_BIT_DECODE<BR>        0x000008 byte range with alignment 0x000001<BR>        3e8 - 0x3ef<BR>      Preferred Descriptor 2 - Interrupt (0x2) Shared (0x3)<BR>        Flags (0x01) - LATCHED<BR>        0x5 - 0x5<BR>    Alternative 1 (Version 1.1)<BR>      Preferred Descriptor 0 - NonArbitrated/ConfigData (0x80) Undetermined Shar<BR>ing (0)<BR>        Flags (0000) -<BR>        Data:              : 0xc000 0x0 0x0<BR>      Preferred Descriptor 1 - Port (0x1) Undetermined Sharing (0)<BR>        Flags (0x05) - PORT_IO 10_BIT_DECODE<BR>        0x000008 byte range with alignment 0x000008<BR>        3e8 - 0x3ef<BR>      Preferred Descriptor 2 - Interrupt (0x2) Shared (0x3)<BR>        Flags (0x01) - LATCHED<BR>        0x5 - 0x5<BR><BR></nobr></P>
<P>First, make the assumption that this is an I/O conflict and dump the arbiters (see the preceding example). The result shows that the range 0x3EC-0x3EF is owned by 0xFF0D0B50, which overlaps the serial device's resources request. Next, dump the device object for the owner of this range, and then dump the devnode for the owner:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>kd&gt; <b>!devobj ff0d0b50</b><BR><BR>Device object (ff0d0b50) is for:<BR> Resource00413e \Driver\isapnp DriverObject ff0d0e10<BR>Current Irp 00000000 RefCount 0 Type 00000004 Flags 00001040<BR>DevExt ff0d0c08 DevNode ff0d0a68<BR>Device queue is not busy.<BR>kd&gt; <b>!devnode ff0d0a68 6</b><BR><BR>DevNode 0xff0d0a68 for PDO 0xff0d0b50 at level 0xffffffff<BR>  Parent 0xff0daf48   Sibling 0000000000   Child 0000000000<BR>  InterfaceType 0xffffffff  Bus Number 0xffffffff<BR>Duplicate PDO 0xff0d0e10  TargetDeviceNotify List - f 0xff0d0acc  b 0xff0d0acc<BR>  Flags (0x00000421)  DNF_PROCESSED, DNF_MADEUP,<BR>                      DNF_RESOURCE_REPORTED<BR>  CmResourceList at 0xe1233628  Version 0.0  Interface 0x1  Bus #0<BR>    Entry 0 - Port (0x1) Device Exclusive (0x1)<BR>      Flags (0x01) - PORT_MEMORY PORT_IO<BR>      Range starts at 0x3ec for 0x4 bytes<BR><BR></nobr></P>
<P>This is a "pseudo-devnode" that corresponds to the range allocated by the ISAPNP driver for its read data port.</P>
<P>To determine the resources that the PnP Manager assigned to a particular device when it attempted to start the device:</P><B></B><OL type="1">
<LI>Place a breakpoint on the routine that is called when the IRP_MN_START_DEVICE request is received by the driver. You can also place a breakpoint on the driver's dispatch routine (if you know its name). In both cases, the driver and its symbols should be loaded. This may require you to set an initial breakpoint.<P>For example, for PCMCIA you can set a breakpoint on <b>pcmcia!pcmciastartpccard</b>. The advantage of using this particular routine is that its second parameter is a CM Resource List that you can dump using <b>!cmreslist</b> (eliminating step 3). See the following PCMCIA example.</P>
</LI>
<LI>When you have determined which device is of interest, dump the device object (if you have not done so already), and then dump the devnode with the CM Resource List. Check which resources were assigned to the device. You may also check whether the resources are a subset of the I/O Resource List. Then type <b>g </b>or single step through the procedure, and determine whether the device was started and which resources were assigned. If a device was offered a set of resources to start but failed to do so, the driver might not be behaving properly (for example, if it incorrectly declared that it can use a set of resources it cannot actually use).</LI>
</OL>
<P></P>
<P></P>
<P><i>Example</i>:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>ntoskrnl!IopStartDevice:<BR>80420212 55               push    ebp<BR>kd&gt; <b>kb</b><BR>ChildEBP RetAddr  Args to Child<BR>f64138c0 8048b640 <b>ff0ce870 </b>ff0d7c08 ff0cde88 ntoskrnl!IopStartDevice <i>(!devobj ff0ce870)</i><BR>f64138f0 8048d8e7 ff0cde88 f6413978 ff0cddc8 ntoskrnl!IopStartAndEnumerateDevice<BR>+0x1a<BR>f6413900 8048de7f ff0cde88 f6413978 ff0cf448 ntoskrnl!IopProcessStartDevicesWork<BR>er+0x43<BR>f6413910 8048d8d5 ff0cf448 8048d8a4 f6413978 ntoskrnl!IopForAllChildDeviceNodes+<BR>0x1f<BR>f6413924 8048de7f ff0cf448 f6413978 ff0d3f48 ntoskrnl!IopProcessStartDevicesWork<BR>er+0x31<BR>f6413934 8048d8d5 ff0d3f48 8048d8a4 f6413978 ntoskrnl!IopForAllChildDeviceNodes+<BR>0x1f<BR>f6413948 8048d893 ff0d3f48 f6413978 e12052e8 ntoskrnl!IopProcessStartDevicesWork<BR>er+0x31<BR>f641395c 804f6f1b ff0d7c08 f6413978 8045c520 ntoskrnl!IopProcessStartDevices+0x1<BR>f<BR>f64139d0 804f5cc1 80088000 f6413aec 8045bba0 ntoskrnl!IopInitializeBootDrivers+0<BR>x2f9<BR>f6413b24 804f4db3 80088000 00000001 00000000 ntoskrnl!IoInitSystem+0x3a6<BR>f6413da8 80447610 80088000 00000000 00000000 ntoskrnl!Phase1Initialization+0x6a3<BR><BR>f6413ddc 8045375a 804f4710 80088000 00000000 ntoskrnl!PspSystemThreadStartup+0x5<BR>4<BR>00000000 00000000 00000000 00000000 00000000 ntoskrnl!KiThreadStartup+0x16<BR>kd&gt; <b>!devobj ff0ce870</b><BR><BR>Device object (ff0ce870) is for:<BR> NTPNP_PCI0002 \Driver\PCI DriverObject ff0ceef0<BR>Current Irp 00000000 RefCount 0 Type 00000022 Flags 00001040AttachedDev ff0cb9e0<BR><BR>DevExt ff0ce928 DevNode <b>ff0cde88</b><BR>Device queue is not busy.<BR>kd&gt; <b>!devnode ff0cde88 6</b><BR><BR>DevNode 0xff0cde88 for PDO 0xff0ce870 at level 0x2<BR>  Parent 0xff0cf448   Sibling 0xff0cddc8   Child 0000000000<BR>  InterfaceType 0xffffffff  Bus Number 0xffffffff<BR>  InstancePath is "PCI\VEN_8086&amp;DEV_7010\0&amp;69"<BR>  ServiceName is "intelide"<BR>  TargetDeviceNotify List - f 0xff0cdeec  b 0xff0cdeec<BR>  Flags (0x00001209)  DNF_PROCESSED, DNF_ENUMERATED,<BR>                      DNF_RESOURCE_ASSIGNED, DNF_ADDED <BR>                      <i>(note that the device is not yet started)</i><BR>  CmResourceList at 0xe120fce8  Version 0.0  Interface 0x5  Bus #0<BR>    Entry 0 - Port (0x1) Device Exclusive (0x1)<BR>      Flags (0x01) - PORT_MEMORY PORT_IO<BR>      Range starts at <b>0xfff0</b> for <b>0x10</b> bytes <i>(these are the resources used: 0xfff0-0xffff)</i><BR>    Entry 1 - DevicePrivate (0x81) Device Exclusive (0x1)<BR>      Flags (0000) -<BR>      Data - {0x00000001, 0x00000004, 0000000000}<BR><BR>  IoResList at 0xe120df88 : Interface 0x5  Bus 0  Slot 0x2d<BR>    Alternative 0 (Version 1.1)<BR>      Descriptor 0 - Port (0x1) Device Exclusive (0x1)<BR>        Flags (0x01) - PORT_IO<BR>        0x000010 byte range with alignment 0x000010<BR>        <b>0 - 0xffff    </b><i> (it could have used any 16 bytes that are 16-byte aligned between 0 and 0xffff)</i><BR>      Descriptor 1 - DevicePrivate (0x81) Device Exclusive (0x1)<BR>        Flags (0000) -<BR>        Data:              : 0x1 0x4 0x0<BR><BR></nobr></P>
<P>Example for PCMCIA:</P>
<P style="cursor:text; padding:2pt,4pt;font: 100% Courier New, Courier, mono; color: #660000;"><nobr>kd&gt; <b>bp pcmcia!pcmciastartpccard</b><BR>Loading symbols for 0x8039d000       pcmcia.sys -&gt;   pcmcia.sys<BR>kd&gt; <b>kb</b><BR>Loading symbols for 0x80241000         ndis.sys -&gt;   ndis.sys<BR>ChildEBP RetAddr  Args to Child<BR>f6413814 803a7cbd ff0d0c30 <b>e11d8808</b> ff0d0c30 pcmcia!PcmciaStartPcCard <BR>f6413838 803a3798 ff0d0c30 ff0d1500 ff0d1588 pcmcia!PcmciaPdoPnpDispatch+0x169<BR>f6413848 80418641 ff0d0c30 ff0d1588 00000000 pcmcia!PcmciaDispatch+0x3a<BR>f641385c 802455cf ff0d1614 ff0d1638 00040000 ntoskrnl!IofCallDriver+0x35<BR>f641387c 802497cf ff0d1588 ff0d0c30 ff0c8210 NDIS!ndisPassIrpDownTheStack+0x3b<BR>f64138ac 80418641 ff0c8210 ff0d161c ff0d1640 NDIS!ndisPnPDispatch+0x1f9<BR>f64138c0 8048de68 ff0c3508 ff0d16a8 00000000 ntoskrnl!IofCallDriver+0x35<BR>f64138d4 8041ff5e ff0c8210 f64138f8 ff0c3508 ntoskrnl!IopAsynchronousCall+0x90<BR>f6413920 8048b4ae ff0d0c30 ff0e0a68 ff0d16a8 ntoskrnl!IopStartDevice+0x76<BR>f6413950 8048d707 ff0d16a8 f64139fc 00000000 ntoskrnl!IopStartAndEnumerateDevice+0x1a<BR>f6413960 8048dc9f ff0d16a8 f64139fc ff0d1e88 ntoskrnl!IopProcessStartDevicesWorker+0x43<BR>f6413970 8048d6f5 ff0d1e88 8048d6c4 f64139fc ntoskrnl!IopForAllChildDeviceNodes+0x1f<BR>f6413984 8048dc9f ff0d1e88 f64139fc ff0d3268 ntoskrnl!IopProcessStartDevicesWorker+0x31<BR>f6413994 8048d6f5 ff0d3268 8048d6c4 f64139fc ntoskrnl!IopForAllChildDeviceNodes+0x1f<BR>f64139a8 8048dc9f ff0d3268 f64139fc ff0d7b28 ntoskrnl!IopProcessStartDevicesWorker+0x31<BR>f64139b8 8048d6f5 ff0d7b28 8048d6c4 f64139fc ntoskrnl!IopForAllChildDeviceNodes+0x1f<BR>f64139cc 8048d6b3 ff0d7b28 f64139fc 80087000 ntoskrnl!IopProcessStartDevicesWorker+0x31<BR>f64139e0 804f6c97 ff0e0a68 f64139fc 8045c140 ntoskrnl!IopProcessStartDevices+0x1f<BR>f6413a30 804f5601 000001e0 80087000 00000000 ntoskrnl!IopInitializeSystemDrivers+0x5b<BR>f6413b7c 804f4820 80087000 00000001 00000000 ntoskrnl!IoInitSystem+0x3fe<BR>kd&gt; <b>!cmreslist e11d8808</b><BR><BR>CmResourceList at 0xe11d8808  Version 0.0  Interface 0x1  Bus #0<BR>  Entry 0 - Interrupt (0x2) Device Exclusive (0x1)<BR>    Flags (0x01) - LATCHED<BR>    Level <b>0x9</b>, Vector <b>0x9</b>, Affinity 0xffffffff<BR>  Entry 1 - Port (0x1) Device Exclusive (0x1)<BR>    Flags (0x01) - PORT_MEMORY PORT_IO<BR>    Range starts at <b>0xdfe0 </b>for <b>0x20</b> bytes <i>(started with IRQ 9, IO dfe0-dfff)</i><BR>  Entry 2 - DevicePrivate (0x81) Device Exclusive (0x1)<BR>    Flags (0000) -<BR>    Data - {0x00010120, 0000000000, 0000000000}<BR><BR>kd&gt; <b>g</b> <BR><BR></nobr></P>
<P></P>
<P></P>
<DIV style="display:yes"></DIV>
<DIV CLASS="footer"><br><A href="dbglegal.htm">© 2009 Microsoft Corporation</A><br><A href="mailto:windbgfb@microsoft.com?subject=documentation feedback [Debugger]: Checking for Resource Conflicts RELEASE: (December 09, 2009)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AThe WDK team uses the feedback submitted to improve the WDK documentation. We do not use your e-mail address for any other purpose. We will remove your e-mail address from our system after the issue you are reporting has been resolved. While we are working to resolve this issue, we may send you an e-mail message to request more information about your feedback. After the issues have been addressed, we may send you an e-mail message to let you know that your feedback has been addressed.%0A%0AFor more information about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx.
              ">Send feedback on this topic</A><br>Debugging Tools for Windows<br>December 09, 2009<br></DIV>
</Body>
</HTML>
