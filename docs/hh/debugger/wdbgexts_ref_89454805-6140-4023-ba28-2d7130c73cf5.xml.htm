<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML DIR="LTR" xmlns:MSHelp="http://msdn.microsoft.com/MSHelp">
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<TITLE>dprintf</TITLE>
<META NAME="ms.locale" content="en-us">
<META NAME="DESCRIPTION" CONTENT="Debugger, Debugger, Design Guide, dprintf"><xml><MSHelp:Attr Name="TopicType" Value="apiref"/>
<MSHelp:Attr Name="TargetOS" Value="Windows"/>
<MSHelp:Attr Name="APIType" Value="Function"/>
<MSHelp:Attr Name="APILocation" Value="wdbgexts.h, dbgeng.h"/>
<MSHelp:Attr Name="APIName" Value="dprintf"/>
<MSHelp:Keyword Index="A" Term="WdbgExts_Ref_89454805-6140-4023-ba28-2d7130c73cf5.xml"/>
<META NAME="MS-HKWD" CONTENT="dprintf function"></xml><LINK REL="stylesheet" type="text/css" href="backsdk4.css"><SCRIPT src="langref.js"></SCRIPT><style>dd {margin-bottom:0em; margin-left:1.9em; }</style>
<style>.divclass {behavior:url(#default#savehistory);}</style>
<META NAME="save" CONTENT="history">
</HEAD>
<Body topmargin="0">
<DIV STYLE="display:none;"></DIV>
<DIV STYLE="display:none;"></DIV>
<TABLE CLASS="buttonbarshade" CELLSPACING="0" border="0"><TR><TD NOWRAP="true"> </TD></TR></TABLE>
<TABLE CLASS="buttonbartable" CELLSPACING="0">
<TR ID="hdr">
<TD NOWRAP="true" CLASS="runninghead">Debugging Tools for Windows</TD>
</TR>
</TABLE>
<H1><A NAME="WdbgExts_Ref_89454805-6140-4023-ba28-2d7130c73cf5.xml"></A>dprintf</H1>
<P><P>The <b>dprintf</b> function prints a formatted string to the Debugger Command window. It works like the C-language routine <b>printf</b>. </P>
</P>
<P class="syntax" style="background:#dddddd;cursor:text;padding:2pt,4pt;font: 100% Courier New, Courier, mono;"><b>VOID </b><BR><b>  dprintf (</b><BR><b></b>    <b>PCSTR</b> <i>format</i>  <BR>    <b>. . . .</b>  [<i>arguments</i>] <BR>    <b>);</b><BR></P>
<DL><H4>Parameters</H4>
<DT><i>format</i></DT>
<DD>Specifies the format string, as in <b>printf</b>.  In general, conversion characters work exactly as in C. For the floating-point conversion characters the 64-bit argument is interpreted as a 32-bit floating-point number unless the <b>l</b>  modifier is used.<P>The <b>%p</b> conversion character is supported, but it represents a pointer in the target's virtual address space.  It may not have any modifiers and it uses the debugger's internal address formatting.  The following additional conversion characters are supported:</P>
<P></P><B></B><table>
<TR valign="top">
<TH Width=""><i>Character</i></TH>
<TH Width=""><i>Argument Type</i></TH>
<TH Width=""><i>Argument</i></TH>
<TH Width=""><i>Text printed</i></TH>
</TR>
<TR valign="top">
<TD Width=""><b>%p</b> </TD>
<TD Width="">ULONG64</TD>
<TD Width="">Pointer in the target's virtual address space</TD>
<TD Width="">The value of the pointer. </TD>
</TR>
<TR valign="top">
<TD Width=""><b>%N</b> </TD>
<TD Width="">DWORD_PTR (32 or 64 bits, depending on the <i>host's</i> architecture) </TD>
<TD Width="">Pointer in the host's virtual address space</TD>
<TD Width="">The value of the pointer.  (This is equivalent to the standard C <b>%p</b> character.) </TD>
</TR>
<TR valign="top">
<TD Width=""><b>%I</b>  </TD>
<TD Width="">ULONG64</TD>
<TD Width="">Any 64-bit value</TD>
<TD Width="">The specified value.  If this is greater than 0xFFFFFFFF it is printed as a 64-bit address, otherwise it is printed as a 32-bit address.</TD>
</TR>
<TR valign="top">
<TD Width=""><b>%ma</b> </TD>
<TD Width="">ULONG64 </TD>
<TD Width="">Address of a NULL-terminated ASCII string in the target's virtual address space</TD>
<TD Width="">The specified string.</TD>
</TR>
<TR valign="top">
<TD Width=""><b>%mu</b> </TD>
<TD Width="">ULONG64 </TD>
<TD Width="">Address of a NULL-terminated Unicode string in the target's virtual address space</TD>
<TD Width="">The specified string.</TD>
</TR>
<TR valign="top">
<TD Width=""><b>%msa</b> </TD>
<TD Width="">ULONG64 </TD>
<TD Width="">Address of an ANSI_STRING structure in the target's virtual address space</TD>
<TD Width="">The specified string.</TD>
</TR>
<TR valign="top">
<TD Width=""><b>%msu</b> </TD>
<TD Width="">ULONG64 </TD>
<TD Width="">Address of a UNICODE_STRING structure in the target's virtual address space</TD>
<TD Width="">The specified string.</TD>
</TR>
<TR valign="top">
<TD Width=""><b>%y</b></TD>
<TD Width="">ULONG64 </TD>
<TD Width="">Address of a debugger symbol in the target's virtual address space</TD>
<TD Width="">String containing the name of the specified symbol (and displacement, if any). </TD>
</TR>
<TR valign="top">
<TD Width=""><b>%ly</b></TD>
<TD Width="">ULONG64 </TD>
<TD Width="">Address of a debugger symbol in the target's virtual address space</TD>
<TD Width="">String containing the name of the specified symbol (and displacement, if any), as well as any available source line information. </TD>
</TR>
</table>
<P></P>
<P></P>
</DD>
<DT><i>arguments</i></DT>
<DD>Specifies arguments for the format string, as in <b>printf</b>. The number of arguments specified should match the number of conversion characters in <i>FormatString</i>. Each argument is an expression that will be evaluated by the default expression evaluator (MASM or C++). For details, see <a href="r13_syntax_d261792b-06ed-497e-a4f5-3e5c7d9dcac7.xml.htm">Numerical Expression Syntax</a>. </DD>
</DL>
<H4>Return Value</H4>
<P>None</P>
<H4>Comments</H4>
<P>When generating very large output strings, it is possible the limits of the debugger engine or operating system may be reached.  For example, some versions of the debugger engine have a 16K character limit for a single piece of output.  If you find that very large output is getting truncated, you may need to split your output into multiple requests.</P>
<H4><b>Requirements</b></H4>
<p><b>Headers: </b>Defined in <i>wdbgexts.h</i>.  If you are writing a WdbgExts extension, include <i>wdbgexts.h</i>. If you are writing a DbgEng extension that calls this function, include <i>wdbgexts.h</i> before <i>dbgeng.h</i> (see <a href="extensions_dg_8afbe494-20c4-4b67-9f30-65ef5c9e66fd.xml.htm">Writing DbgEng Extension Code</a> for details).</p>
<DIV style="display:yes"></DIV>
<DIV CLASS="footer"><br><A href="dbglegal.htm">© 2009 Microsoft Corporation</A><br><A href="mailto:windbgfb@microsoft.com?subject=documentation feedback [Debugger]: dprintf RELEASE: (December 09, 2009)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AThe WDK team uses the feedback submitted to improve the WDK documentation. We do not use your e-mail address for any other purpose. We will remove your e-mail address from our system after the issue you are reporting has been resolved. While we are working to resolve this issue, we may send you an e-mail message to request more information about your feedback. After the issues have been addressed, we may send you an e-mail message to let you know that your feedback has been addressed.%0A%0AFor more information about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx.
              ">Send feedback on this topic</A><br>Debugging Tools for Windows<br>December 09, 2009<br></DIV>
</Body>
</HTML>
